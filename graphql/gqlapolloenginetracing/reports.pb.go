// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reports.proto

package gqlapolloenginetracing

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Trace_CachePolicy_Scope int32

const (
	Trace_CachePolicy_UNKNOWN Trace_CachePolicy_Scope = 0
	Trace_CachePolicy_PUBLIC  Trace_CachePolicy_Scope = 1
	Trace_CachePolicy_PRIVATE Trace_CachePolicy_Scope = 2
)

var Trace_CachePolicy_Scope_name = map[int32]string{
	0: "UNKNOWN",
	1: "PUBLIC",
	2: "PRIVATE",
}

var Trace_CachePolicy_Scope_value = map[string]int32{
	"UNKNOWN": 0,
	"PUBLIC":  1,
	"PRIVATE": 2,
}

func (x Trace_CachePolicy_Scope) String() string {
	return proto.EnumName(Trace_CachePolicy_Scope_name, int32(x))
}

func (Trace_CachePolicy_Scope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 0, 0}
}

type Trace_HTTP_Method int32

const (
	Trace_HTTP_UNKNOWN Trace_HTTP_Method = 0
	Trace_HTTP_OPTIONS Trace_HTTP_Method = 1
	Trace_HTTP_GET     Trace_HTTP_Method = 2
	Trace_HTTP_HEAD    Trace_HTTP_Method = 3
	Trace_HTTP_POST    Trace_HTTP_Method = 4
	Trace_HTTP_PUT     Trace_HTTP_Method = 5
	Trace_HTTP_DELETE  Trace_HTTP_Method = 6
	Trace_HTTP_TRACE   Trace_HTTP_Method = 7
	Trace_HTTP_CONNECT Trace_HTTP_Method = 8
	Trace_HTTP_PATCH   Trace_HTTP_Method = 9
)

var Trace_HTTP_Method_name = map[int32]string{
	0: "UNKNOWN",
	1: "OPTIONS",
	2: "GET",
	3: "HEAD",
	4: "POST",
	5: "PUT",
	6: "DELETE",
	7: "TRACE",
	8: "CONNECT",
	9: "PATCH",
}

var Trace_HTTP_Method_value = map[string]int32{
	"UNKNOWN": 0,
	"OPTIONS": 1,
	"GET":     2,
	"HEAD":    3,
	"POST":    4,
	"PUT":     5,
	"DELETE":  6,
	"TRACE":   7,
	"CONNECT": 8,
	"PATCH":   9,
}

func (x Trace_HTTP_Method) String() string {
	return proto.EnumName(Trace_HTTP_Method_name, int32(x))
}

func (Trace_HTTP_Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 3, 0}
}

type Trace struct {
	// Wallclock time when the trace began.
	StartTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Wallclock time when the trace ended.
	EndTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// High precision duration of the trace; may not equal end_time-start_time
	// (eg, if your machine's clock changed during the trace).
	DurationNs uint64 `protobuf:"varint,11,opt,name=duration_ns,json=durationNs,proto3" json:"duration_ns,omitempty"`
	// A tree containing information about all resolvers run directly by this
	// service, including errors.
	Root *Trace_Node `protobuf:"bytes,14,opt,name=root,proto3" json:"root,omitempty"`
	// In addition to details.raw_query, we include a "signature" of the query,
	// which can be normalized: for example, you may want to discard aliases, drop
	// unused operations and fragments, sort fields, etc. The most important thing
	// here is that the signature match the signature in StatsReports. In
	// StatsReports signatures show up as the key in the per_query map (with the
	// operation name prepended).  The signature should be a valid GraphQL query.
	// All traces must have a signature; if this Trace is in a FullTracesReport
	// that signature is in the key of traces_per_query rather than in this field.
	// Engineproxy provides the signature in legacy_signature_needs_resigning
	// instead.
	Signature string         `protobuf:"bytes,19,opt,name=signature,proto3" json:"signature,omitempty"`
	Details   *Trace_Details `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	// Note: engineproxy always sets client_name, client_version, and client_address to "none".
	// apollo-engine-reporting allows for them to be set by the user.
	ClientName        string             `protobuf:"bytes,7,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClientVersion     string             `protobuf:"bytes,8,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientAddress     string             `protobuf:"bytes,9,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	ClientReferenceId string             `protobuf:"bytes,23,opt,name=client_reference_id,json=clientReferenceId,proto3" json:"client_reference_id,omitempty"`
	Http              *Trace_HTTP        `protobuf:"bytes,10,opt,name=http,proto3" json:"http,omitempty"`
	CachePolicy       *Trace_CachePolicy `protobuf:"bytes,18,opt,name=cache_policy,json=cachePolicy,proto3" json:"cache_policy,omitempty"`
	// If this Trace was created by a gateway, this is the query plan, including
	// sub-Traces for federated services. Note that the 'root' tree on the
	// top-level Trace won't contain any resolvers (though it could contain errors
	// that occurred in the gateway itself).
	QueryPlan *Trace_QueryPlanNode `protobuf:"bytes,26,opt,name=query_plan,json=queryPlan,proto3" json:"query_plan,omitempty"`
	// Was this response served from a full query response cache?  (In that case
	// the node tree will have no resolvers.)
	FullQueryCacheHit bool `protobuf:"varint,20,opt,name=full_query_cache_hit,json=fullQueryCacheHit,proto3" json:"full_query_cache_hit,omitempty"`
	// Was this query specified successfully as a persisted query hash?
	PersistedQueryHit bool `protobuf:"varint,21,opt,name=persisted_query_hit,json=persistedQueryHit,proto3" json:"persisted_query_hit,omitempty"`
	// Did this query contain both a full query string and a persisted query hash?
	// (This typically means that a previous request was rejected as an unknown
	// persisted query.)
	PersistedQueryRegister bool `protobuf:"varint,22,opt,name=persisted_query_register,json=persistedQueryRegister,proto3" json:"persisted_query_register,omitempty"`
	// Was this operation registered and a part of the safelist?
	RegisteredOperation bool `protobuf:"varint,24,opt,name=registered_operation,json=registeredOperation,proto3" json:"registered_operation,omitempty"`
	// Was this operation forbidden due to lack of safelisting?
	ForbiddenOperation bool `protobuf:"varint,25,opt,name=forbidden_operation,json=forbiddenOperation,proto3" json:"forbidden_operation,omitempty"`
	// --------------------------------------------------------------
	// Fields below this line are only set by the old Go engineproxy.
	OriginReportedStartTime  *timestamp.Timestamp `protobuf:"bytes,15,opt,name=origin_reported_start_time,json=originReportedStartTime,proto3" json:"origin_reported_start_time,omitempty"`
	OriginReportedEndTime    *timestamp.Timestamp `protobuf:"bytes,16,opt,name=origin_reported_end_time,json=originReportedEndTime,proto3" json:"origin_reported_end_time,omitempty"`
	OriginReportedDurationNs uint64               `protobuf:"varint,17,opt,name=origin_reported_duration_ns,json=originReportedDurationNs,proto3" json:"origin_reported_duration_ns,omitempty"`
	// Older agents (eg the Go engineproxy) relied to some degree on the Engine
	// backend to run their own semi-compatible implementation of a specific
	// variant of query signatures. The backend does not do this for new agents (which
	// set the above 'signature' field). It used to still "re-sign" signatures
	// from engineproxy, but we've now simplified the backend to no longer do this.
	// Deprecated and ignored in FullTracesReports.
	LegacySignatureNeedsResigning string   `protobuf:"bytes,5,opt,name=legacy_signature_needs_resigning,json=legacySignatureNeedsResigning,proto3" json:"legacy_signature_needs_resigning,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *Trace) Reset()         { *m = Trace{} }
func (m *Trace) String() string { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()    {}
func (*Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0}
}

func (m *Trace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace.Unmarshal(m, b)
}
func (m *Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace.Marshal(b, m, deterministic)
}
func (m *Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace.Merge(m, src)
}
func (m *Trace) XXX_Size() int {
	return xxx_messageInfo_Trace.Size(m)
}
func (m *Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_Trace proto.InternalMessageInfo

func (m *Trace) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Trace) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Trace) GetDurationNs() uint64 {
	if m != nil {
		return m.DurationNs
	}
	return 0
}

func (m *Trace) GetRoot() *Trace_Node {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *Trace) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Trace) GetDetails() *Trace_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Trace) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *Trace) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *Trace) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *Trace) GetClientReferenceId() string {
	if m != nil {
		return m.ClientReferenceId
	}
	return ""
}

func (m *Trace) GetHttp() *Trace_HTTP {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *Trace) GetCachePolicy() *Trace_CachePolicy {
	if m != nil {
		return m.CachePolicy
	}
	return nil
}

func (m *Trace) GetQueryPlan() *Trace_QueryPlanNode {
	if m != nil {
		return m.QueryPlan
	}
	return nil
}

func (m *Trace) GetFullQueryCacheHit() bool {
	if m != nil {
		return m.FullQueryCacheHit
	}
	return false
}

func (m *Trace) GetPersistedQueryHit() bool {
	if m != nil {
		return m.PersistedQueryHit
	}
	return false
}

func (m *Trace) GetPersistedQueryRegister() bool {
	if m != nil {
		return m.PersistedQueryRegister
	}
	return false
}

func (m *Trace) GetRegisteredOperation() bool {
	if m != nil {
		return m.RegisteredOperation
	}
	return false
}

func (m *Trace) GetForbiddenOperation() bool {
	if m != nil {
		return m.ForbiddenOperation
	}
	return false
}

func (m *Trace) GetOriginReportedStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.OriginReportedStartTime
	}
	return nil
}

func (m *Trace) GetOriginReportedEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.OriginReportedEndTime
	}
	return nil
}

func (m *Trace) GetOriginReportedDurationNs() uint64 {
	if m != nil {
		return m.OriginReportedDurationNs
	}
	return 0
}

func (m *Trace) GetLegacySignatureNeedsResigning() string {
	if m != nil {
		return m.LegacySignatureNeedsResigning
	}
	return ""
}

type Trace_CachePolicy struct {
	Scope                Trace_CachePolicy_Scope `protobuf:"varint,1,opt,name=scope,proto3,enum=mdg.engine.proto.Trace_CachePolicy_Scope" json:"scope,omitempty"`
	MaxAgeNs             int64                   `protobuf:"varint,2,opt,name=max_age_ns,json=maxAgeNs,proto3" json:"max_age_ns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Trace_CachePolicy) Reset()         { *m = Trace_CachePolicy{} }
func (m *Trace_CachePolicy) String() string { return proto.CompactTextString(m) }
func (*Trace_CachePolicy) ProtoMessage()    {}
func (*Trace_CachePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 0}
}

func (m *Trace_CachePolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_CachePolicy.Unmarshal(m, b)
}
func (m *Trace_CachePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_CachePolicy.Marshal(b, m, deterministic)
}
func (m *Trace_CachePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_CachePolicy.Merge(m, src)
}
func (m *Trace_CachePolicy) XXX_Size() int {
	return xxx_messageInfo_Trace_CachePolicy.Size(m)
}
func (m *Trace_CachePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_CachePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_CachePolicy proto.InternalMessageInfo

func (m *Trace_CachePolicy) GetScope() Trace_CachePolicy_Scope {
	if m != nil {
		return m.Scope
	}
	return Trace_CachePolicy_UNKNOWN
}

func (m *Trace_CachePolicy) GetMaxAgeNs() int64 {
	if m != nil {
		return m.MaxAgeNs
	}
	return 0
}

type Trace_Details struct {
	// The variables associated with this query (unless the reporting agent is
	// configured to keep them all private). Values are JSON: ie, strings are
	// enclosed in double quotes, etc.  The value of a private variable is
	// the empty string.
	VariablesJson map[string]string `protobuf:"bytes,4,rep,name=variables_json,json=variablesJson,proto3" json:"variables_json,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deprecated. Engineproxy did not encode variable values as JSON, so you
	// couldn't tell numbers from numeric strings. Send variables_json instead.
	Variables map[string][]byte `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional: this is the original full query before the signature algorithm
	// is applied.  Engineproxy always sent this in all traces, which meant that
	// literal-masking done by the signature algorithm didn't fully hide
	// sensitive data from Engine servers. apollo-engine-reporting does not
	// include this by default.  (The Engine frontend does not currently show
	// this field.)
	RawQuery string `protobuf:"bytes,2,opt,name=raw_query,json=rawQuery,proto3" json:"raw_query,omitempty"`
	// Don't include this in traces inside a FullTracesReport; the operation
	// name for these traces comes from the key of the traces_per_query map.
	OperationName        string   `protobuf:"bytes,3,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trace_Details) Reset()         { *m = Trace_Details{} }
func (m *Trace_Details) String() string { return proto.CompactTextString(m) }
func (*Trace_Details) ProtoMessage()    {}
func (*Trace_Details) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 1}
}

func (m *Trace_Details) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_Details.Unmarshal(m, b)
}
func (m *Trace_Details) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_Details.Marshal(b, m, deterministic)
}
func (m *Trace_Details) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_Details.Merge(m, src)
}
func (m *Trace_Details) XXX_Size() int {
	return xxx_messageInfo_Trace_Details.Size(m)
}
func (m *Trace_Details) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_Details.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_Details proto.InternalMessageInfo

func (m *Trace_Details) GetVariablesJson() map[string]string {
	if m != nil {
		return m.VariablesJson
	}
	return nil
}

func (m *Trace_Details) GetVariables() map[string][]byte {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *Trace_Details) GetRawQuery() string {
	if m != nil {
		return m.RawQuery
	}
	return ""
}

func (m *Trace_Details) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

type Trace_Error struct {
	Message              string            `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Location             []*Trace_Location `protobuf:"bytes,2,rep,name=location,proto3" json:"location,omitempty"`
	TimeNs               uint64            `protobuf:"varint,3,opt,name=time_ns,json=timeNs,proto3" json:"time_ns,omitempty"`
	Json                 string            `protobuf:"bytes,4,opt,name=json,proto3" json:"json,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Trace_Error) Reset()         { *m = Trace_Error{} }
func (m *Trace_Error) String() string { return proto.CompactTextString(m) }
func (*Trace_Error) ProtoMessage()    {}
func (*Trace_Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 2}
}

func (m *Trace_Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_Error.Unmarshal(m, b)
}
func (m *Trace_Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_Error.Marshal(b, m, deterministic)
}
func (m *Trace_Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_Error.Merge(m, src)
}
func (m *Trace_Error) XXX_Size() int {
	return xxx_messageInfo_Trace_Error.Size(m)
}
func (m *Trace_Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_Error proto.InternalMessageInfo

func (m *Trace_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Trace_Error) GetLocation() []*Trace_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Trace_Error) GetTimeNs() uint64 {
	if m != nil {
		return m.TimeNs
	}
	return 0
}

func (m *Trace_Error) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

type Trace_HTTP struct {
	Method Trace_HTTP_Method `protobuf:"varint,1,opt,name=method,proto3,enum=mdg.engine.proto.Trace_HTTP_Method" json:"method,omitempty"`
	Host   string            `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Path   string            `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Should exclude manual blacklist ("Auth" by default)
	RequestHeaders       map[string]*Trace_HTTP_Values `protobuf:"bytes,4,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResponseHeaders      map[string]*Trace_HTTP_Values `protobuf:"bytes,5,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StatusCode           uint32                        `protobuf:"varint,6,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Secure               bool                          `protobuf:"varint,8,opt,name=secure,proto3" json:"secure,omitempty"`
	Protocol             string                        `protobuf:"bytes,9,opt,name=protocol,proto3" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Trace_HTTP) Reset()         { *m = Trace_HTTP{} }
func (m *Trace_HTTP) String() string { return proto.CompactTextString(m) }
func (*Trace_HTTP) ProtoMessage()    {}
func (*Trace_HTTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 3}
}

func (m *Trace_HTTP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_HTTP.Unmarshal(m, b)
}
func (m *Trace_HTTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_HTTP.Marshal(b, m, deterministic)
}
func (m *Trace_HTTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_HTTP.Merge(m, src)
}
func (m *Trace_HTTP) XXX_Size() int {
	return xxx_messageInfo_Trace_HTTP.Size(m)
}
func (m *Trace_HTTP) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_HTTP.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_HTTP proto.InternalMessageInfo

func (m *Trace_HTTP) GetMethod() Trace_HTTP_Method {
	if m != nil {
		return m.Method
	}
	return Trace_HTTP_UNKNOWN
}

func (m *Trace_HTTP) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Trace_HTTP) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Trace_HTTP) GetRequestHeaders() map[string]*Trace_HTTP_Values {
	if m != nil {
		return m.RequestHeaders
	}
	return nil
}

func (m *Trace_HTTP) GetResponseHeaders() map[string]*Trace_HTTP_Values {
	if m != nil {
		return m.ResponseHeaders
	}
	return nil
}

func (m *Trace_HTTP) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *Trace_HTTP) GetSecure() bool {
	if m != nil {
		return m.Secure
	}
	return false
}

func (m *Trace_HTTP) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type Trace_HTTP_Values struct {
	Value                []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trace_HTTP_Values) Reset()         { *m = Trace_HTTP_Values{} }
func (m *Trace_HTTP_Values) String() string { return proto.CompactTextString(m) }
func (*Trace_HTTP_Values) ProtoMessage()    {}
func (*Trace_HTTP_Values) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 3, 0}
}

func (m *Trace_HTTP_Values) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_HTTP_Values.Unmarshal(m, b)
}
func (m *Trace_HTTP_Values) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_HTTP_Values.Marshal(b, m, deterministic)
}
func (m *Trace_HTTP_Values) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_HTTP_Values.Merge(m, src)
}
func (m *Trace_HTTP_Values) XXX_Size() int {
	return xxx_messageInfo_Trace_HTTP_Values.Size(m)
}
func (m *Trace_HTTP_Values) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_HTTP_Values.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_HTTP_Values proto.InternalMessageInfo

func (m *Trace_HTTP_Values) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type Trace_Location struct {
	Line                 uint32   `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column               uint32   `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trace_Location) Reset()         { *m = Trace_Location{} }
func (m *Trace_Location) String() string { return proto.CompactTextString(m) }
func (*Trace_Location) ProtoMessage()    {}
func (*Trace_Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 4}
}

func (m *Trace_Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_Location.Unmarshal(m, b)
}
func (m *Trace_Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_Location.Marshal(b, m, deterministic)
}
func (m *Trace_Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_Location.Merge(m, src)
}
func (m *Trace_Location) XXX_Size() int {
	return xxx_messageInfo_Trace_Location.Size(m)
}
func (m *Trace_Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_Location proto.InternalMessageInfo

func (m *Trace_Location) GetLine() uint32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *Trace_Location) GetColumn() uint32 {
	if m != nil {
		return m.Column
	}
	return 0
}

// We store information on each resolver execution as a Node on a tree.
// The structure of the tree corresponds to the structure of the GraphQL
// response; it does not indicate the order in which resolvers were
// invoked.  Note that nodes representing indexes (and the root node)
// don't contain all Node fields (eg types and times).
type Trace_Node struct {
	// The name of the field (for Nodes representing a resolver call) or the
	// index in a list (for intermediate Nodes representing elements of a list).
	// field_name is the name of the field as it appears in the GraphQL
	// response: ie, it may be an alias.  (In that case, the original_field_name
	// field holds the actual field name from the schema.) In any context where
	// we're building up a path, we use the response_name rather than the
	// original_field_name.
	//
	// Types that are valid to be assigned to Id:
	//	*Trace_Node_ResponseName
	//	*Trace_Node_Index
	Id                isTrace_Node_Id `protobuf_oneof:"id"`
	OriginalFieldName string          `protobuf:"bytes,14,opt,name=original_field_name,json=originalFieldName,proto3" json:"original_field_name,omitempty"`
	// The field's return type; e.g. "String!" for User.email:String!
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The field's parent type; e.g. "User" for User.email:String!
	ParentType  string             `protobuf:"bytes,13,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty"`
	CachePolicy *Trace_CachePolicy `protobuf:"bytes,5,opt,name=cache_policy,json=cachePolicy,proto3" json:"cache_policy,omitempty"`
	// relative to the trace's start_time, in ns
	StartTime uint64 `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// relative to the trace's start_time, in ns
	EndTime              uint64         `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Error                []*Trace_Error `protobuf:"bytes,11,rep,name=error,proto3" json:"error,omitempty"`
	Child                []*Trace_Node  `protobuf:"bytes,12,rep,name=child,proto3" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Trace_Node) Reset()         { *m = Trace_Node{} }
func (m *Trace_Node) String() string { return proto.CompactTextString(m) }
func (*Trace_Node) ProtoMessage()    {}
func (*Trace_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 5}
}

func (m *Trace_Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_Node.Unmarshal(m, b)
}
func (m *Trace_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_Node.Marshal(b, m, deterministic)
}
func (m *Trace_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_Node.Merge(m, src)
}
func (m *Trace_Node) XXX_Size() int {
	return xxx_messageInfo_Trace_Node.Size(m)
}
func (m *Trace_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_Node proto.InternalMessageInfo

type isTrace_Node_Id interface {
	isTrace_Node_Id()
}

type Trace_Node_ResponseName struct {
	ResponseName string `protobuf:"bytes,1,opt,name=response_name,json=responseName,proto3,oneof"`
}

type Trace_Node_Index struct {
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3,oneof"`
}

func (*Trace_Node_ResponseName) isTrace_Node_Id() {}

func (*Trace_Node_Index) isTrace_Node_Id() {}

func (m *Trace_Node) GetId() isTrace_Node_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Trace_Node) GetResponseName() string {
	if x, ok := m.GetId().(*Trace_Node_ResponseName); ok {
		return x.ResponseName
	}
	return ""
}

func (m *Trace_Node) GetIndex() uint32 {
	if x, ok := m.GetId().(*Trace_Node_Index); ok {
		return x.Index
	}
	return 0
}

func (m *Trace_Node) GetOriginalFieldName() string {
	if m != nil {
		return m.OriginalFieldName
	}
	return ""
}

func (m *Trace_Node) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Trace_Node) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Trace_Node) GetCachePolicy() *Trace_CachePolicy {
	if m != nil {
		return m.CachePolicy
	}
	return nil
}

func (m *Trace_Node) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Trace_Node) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Trace_Node) GetError() []*Trace_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Trace_Node) GetChild() []*Trace_Node {
	if m != nil {
		return m.Child
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Trace_Node) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Trace_Node_ResponseName)(nil),
		(*Trace_Node_Index)(nil),
	}
}

// represents a node in the query plan, under which there is a trace tree for that service fetch.
// In particular, each fetch node represents a call to an implementing service, and calls to implementing
// services may not be unique. See https://github.com/apollographql/apollo-server/blob/master/packages/apollo-gateway/src/QueryPlan.ts
// for more information and details.
type Trace_QueryPlanNode struct {
	// Types that are valid to be assigned to Node:
	//	*Trace_QueryPlanNode_Sequence
	//	*Trace_QueryPlanNode_Parallel
	//	*Trace_QueryPlanNode_Fetch
	//	*Trace_QueryPlanNode_Flatten
	Node                 isTrace_QueryPlanNode_Node `protobuf_oneof:"node"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Trace_QueryPlanNode) Reset()         { *m = Trace_QueryPlanNode{} }
func (m *Trace_QueryPlanNode) String() string { return proto.CompactTextString(m) }
func (*Trace_QueryPlanNode) ProtoMessage()    {}
func (*Trace_QueryPlanNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 6}
}

func (m *Trace_QueryPlanNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_QueryPlanNode.Unmarshal(m, b)
}
func (m *Trace_QueryPlanNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_QueryPlanNode.Marshal(b, m, deterministic)
}
func (m *Trace_QueryPlanNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_QueryPlanNode.Merge(m, src)
}
func (m *Trace_QueryPlanNode) XXX_Size() int {
	return xxx_messageInfo_Trace_QueryPlanNode.Size(m)
}
func (m *Trace_QueryPlanNode) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_QueryPlanNode.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_QueryPlanNode proto.InternalMessageInfo

type isTrace_QueryPlanNode_Node interface {
	isTrace_QueryPlanNode_Node()
}

type Trace_QueryPlanNode_Sequence struct {
	Sequence *Trace_QueryPlanNode_SequenceNode `protobuf:"bytes,1,opt,name=sequence,proto3,oneof"`
}

type Trace_QueryPlanNode_Parallel struct {
	Parallel *Trace_QueryPlanNode_ParallelNode `protobuf:"bytes,2,opt,name=parallel,proto3,oneof"`
}

type Trace_QueryPlanNode_Fetch struct {
	Fetch *Trace_QueryPlanNode_FetchNode `protobuf:"bytes,3,opt,name=fetch,proto3,oneof"`
}

type Trace_QueryPlanNode_Flatten struct {
	Flatten *Trace_QueryPlanNode_FlattenNode `protobuf:"bytes,4,opt,name=flatten,proto3,oneof"`
}

func (*Trace_QueryPlanNode_Sequence) isTrace_QueryPlanNode_Node() {}

func (*Trace_QueryPlanNode_Parallel) isTrace_QueryPlanNode_Node() {}

func (*Trace_QueryPlanNode_Fetch) isTrace_QueryPlanNode_Node() {}

func (*Trace_QueryPlanNode_Flatten) isTrace_QueryPlanNode_Node() {}

func (m *Trace_QueryPlanNode) GetNode() isTrace_QueryPlanNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Trace_QueryPlanNode) GetSequence() *Trace_QueryPlanNode_SequenceNode {
	if x, ok := m.GetNode().(*Trace_QueryPlanNode_Sequence); ok {
		return x.Sequence
	}
	return nil
}

func (m *Trace_QueryPlanNode) GetParallel() *Trace_QueryPlanNode_ParallelNode {
	if x, ok := m.GetNode().(*Trace_QueryPlanNode_Parallel); ok {
		return x.Parallel
	}
	return nil
}

func (m *Trace_QueryPlanNode) GetFetch() *Trace_QueryPlanNode_FetchNode {
	if x, ok := m.GetNode().(*Trace_QueryPlanNode_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (m *Trace_QueryPlanNode) GetFlatten() *Trace_QueryPlanNode_FlattenNode {
	if x, ok := m.GetNode().(*Trace_QueryPlanNode_Flatten); ok {
		return x.Flatten
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Trace_QueryPlanNode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Trace_QueryPlanNode_Sequence)(nil),
		(*Trace_QueryPlanNode_Parallel)(nil),
		(*Trace_QueryPlanNode_Fetch)(nil),
		(*Trace_QueryPlanNode_Flatten)(nil),
	}
}

// This represents a set of nodes to be executed sequentially by the Gateway executor
type Trace_QueryPlanNode_SequenceNode struct {
	Nodes                []*Trace_QueryPlanNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Trace_QueryPlanNode_SequenceNode) Reset()         { *m = Trace_QueryPlanNode_SequenceNode{} }
func (m *Trace_QueryPlanNode_SequenceNode) String() string { return proto.CompactTextString(m) }
func (*Trace_QueryPlanNode_SequenceNode) ProtoMessage()    {}
func (*Trace_QueryPlanNode_SequenceNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 6, 0}
}

func (m *Trace_QueryPlanNode_SequenceNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_QueryPlanNode_SequenceNode.Unmarshal(m, b)
}
func (m *Trace_QueryPlanNode_SequenceNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_QueryPlanNode_SequenceNode.Marshal(b, m, deterministic)
}
func (m *Trace_QueryPlanNode_SequenceNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_QueryPlanNode_SequenceNode.Merge(m, src)
}
func (m *Trace_QueryPlanNode_SequenceNode) XXX_Size() int {
	return xxx_messageInfo_Trace_QueryPlanNode_SequenceNode.Size(m)
}
func (m *Trace_QueryPlanNode_SequenceNode) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_QueryPlanNode_SequenceNode.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_QueryPlanNode_SequenceNode proto.InternalMessageInfo

func (m *Trace_QueryPlanNode_SequenceNode) GetNodes() []*Trace_QueryPlanNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// This represents a set of nodes to be executed in parallel by the Gateway executor
type Trace_QueryPlanNode_ParallelNode struct {
	Nodes                []*Trace_QueryPlanNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Trace_QueryPlanNode_ParallelNode) Reset()         { *m = Trace_QueryPlanNode_ParallelNode{} }
func (m *Trace_QueryPlanNode_ParallelNode) String() string { return proto.CompactTextString(m) }
func (*Trace_QueryPlanNode_ParallelNode) ProtoMessage()    {}
func (*Trace_QueryPlanNode_ParallelNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 6, 1}
}

func (m *Trace_QueryPlanNode_ParallelNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_QueryPlanNode_ParallelNode.Unmarshal(m, b)
}
func (m *Trace_QueryPlanNode_ParallelNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_QueryPlanNode_ParallelNode.Marshal(b, m, deterministic)
}
func (m *Trace_QueryPlanNode_ParallelNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_QueryPlanNode_ParallelNode.Merge(m, src)
}
func (m *Trace_QueryPlanNode_ParallelNode) XXX_Size() int {
	return xxx_messageInfo_Trace_QueryPlanNode_ParallelNode.Size(m)
}
func (m *Trace_QueryPlanNode_ParallelNode) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_QueryPlanNode_ParallelNode.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_QueryPlanNode_ParallelNode proto.InternalMessageInfo

func (m *Trace_QueryPlanNode_ParallelNode) GetNodes() []*Trace_QueryPlanNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// This represents a node to send an operation to an implementing service
type Trace_QueryPlanNode_FetchNode struct {
	// XXX When we want to include more details about the sub-operation that was
	// executed against this service, we should include that here in each fetch node.
	// This might include an operation signature, requires directive, reference resolutions, etc.
	ServiceName        string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	TraceParsingFailed bool   `protobuf:"varint,2,opt,name=traceParsingFailed,proto3" json:"traceParsingFailed,omitempty"`
	// This Trace only contains start_time, end_time, duration_ns, and root;
	// all timings were calculated **on the federated service**, and clock skew
	// will be handled by the ingress server.
	Trace *Trace `protobuf:"bytes,3,opt,name=trace,proto3" json:"trace,omitempty"`
	// relative to the outer trace's start_time, in ns, measured in the gateway.
	SentTimeOffset uint64 `protobuf:"varint,4,opt,name=sent_time_offset,json=sentTimeOffset,proto3" json:"sent_time_offset,omitempty"`
	// Wallclock times measured in the gateway for when this operation was
	// sent and received.
	SentTime             *timestamp.Timestamp `protobuf:"bytes,5,opt,name=sent_time,json=sentTime,proto3" json:"sent_time,omitempty"`
	ReceivedTime         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Trace_QueryPlanNode_FetchNode) Reset()         { *m = Trace_QueryPlanNode_FetchNode{} }
func (m *Trace_QueryPlanNode_FetchNode) String() string { return proto.CompactTextString(m) }
func (*Trace_QueryPlanNode_FetchNode) ProtoMessage()    {}
func (*Trace_QueryPlanNode_FetchNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 6, 2}
}

func (m *Trace_QueryPlanNode_FetchNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_QueryPlanNode_FetchNode.Unmarshal(m, b)
}
func (m *Trace_QueryPlanNode_FetchNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_QueryPlanNode_FetchNode.Marshal(b, m, deterministic)
}
func (m *Trace_QueryPlanNode_FetchNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_QueryPlanNode_FetchNode.Merge(m, src)
}
func (m *Trace_QueryPlanNode_FetchNode) XXX_Size() int {
	return xxx_messageInfo_Trace_QueryPlanNode_FetchNode.Size(m)
}
func (m *Trace_QueryPlanNode_FetchNode) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_QueryPlanNode_FetchNode.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_QueryPlanNode_FetchNode proto.InternalMessageInfo

func (m *Trace_QueryPlanNode_FetchNode) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Trace_QueryPlanNode_FetchNode) GetTraceParsingFailed() bool {
	if m != nil {
		return m.TraceParsingFailed
	}
	return false
}

func (m *Trace_QueryPlanNode_FetchNode) GetTrace() *Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func (m *Trace_QueryPlanNode_FetchNode) GetSentTimeOffset() uint64 {
	if m != nil {
		return m.SentTimeOffset
	}
	return 0
}

func (m *Trace_QueryPlanNode_FetchNode) GetSentTime() *timestamp.Timestamp {
	if m != nil {
		return m.SentTime
	}
	return nil
}

func (m *Trace_QueryPlanNode_FetchNode) GetReceivedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ReceivedTime
	}
	return nil
}

// This node represents a way to reach into the response path and attach related entities.
// XXX Flatten is really not the right name and this node may be renamed in the query planner.
type Trace_QueryPlanNode_FlattenNode struct {
	ResponsePath         []*Trace_QueryPlanNode_ResponsePathElement `protobuf:"bytes,1,rep,name=response_path,json=responsePath,proto3" json:"response_path,omitempty"`
	Node                 *Trace_QueryPlanNode                       `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *Trace_QueryPlanNode_FlattenNode) Reset()         { *m = Trace_QueryPlanNode_FlattenNode{} }
func (m *Trace_QueryPlanNode_FlattenNode) String() string { return proto.CompactTextString(m) }
func (*Trace_QueryPlanNode_FlattenNode) ProtoMessage()    {}
func (*Trace_QueryPlanNode_FlattenNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 6, 3}
}

func (m *Trace_QueryPlanNode_FlattenNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_QueryPlanNode_FlattenNode.Unmarshal(m, b)
}
func (m *Trace_QueryPlanNode_FlattenNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_QueryPlanNode_FlattenNode.Marshal(b, m, deterministic)
}
func (m *Trace_QueryPlanNode_FlattenNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_QueryPlanNode_FlattenNode.Merge(m, src)
}
func (m *Trace_QueryPlanNode_FlattenNode) XXX_Size() int {
	return xxx_messageInfo_Trace_QueryPlanNode_FlattenNode.Size(m)
}
func (m *Trace_QueryPlanNode_FlattenNode) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_QueryPlanNode_FlattenNode.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_QueryPlanNode_FlattenNode proto.InternalMessageInfo

func (m *Trace_QueryPlanNode_FlattenNode) GetResponsePath() []*Trace_QueryPlanNode_ResponsePathElement {
	if m != nil {
		return m.ResponsePath
	}
	return nil
}

func (m *Trace_QueryPlanNode_FlattenNode) GetNode() *Trace_QueryPlanNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type Trace_QueryPlanNode_ResponsePathElement struct {
	// Types that are valid to be assigned to Id:
	//	*Trace_QueryPlanNode_ResponsePathElement_FieldName
	//	*Trace_QueryPlanNode_ResponsePathElement_Index
	Id                   isTrace_QueryPlanNode_ResponsePathElement_Id `protobuf_oneof:"id"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *Trace_QueryPlanNode_ResponsePathElement) Reset() {
	*m = Trace_QueryPlanNode_ResponsePathElement{}
}
func (m *Trace_QueryPlanNode_ResponsePathElement) String() string { return proto.CompactTextString(m) }
func (*Trace_QueryPlanNode_ResponsePathElement) ProtoMessage()    {}
func (*Trace_QueryPlanNode_ResponsePathElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0, 6, 4}
}

func (m *Trace_QueryPlanNode_ResponsePathElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace_QueryPlanNode_ResponsePathElement.Unmarshal(m, b)
}
func (m *Trace_QueryPlanNode_ResponsePathElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace_QueryPlanNode_ResponsePathElement.Marshal(b, m, deterministic)
}
func (m *Trace_QueryPlanNode_ResponsePathElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace_QueryPlanNode_ResponsePathElement.Merge(m, src)
}
func (m *Trace_QueryPlanNode_ResponsePathElement) XXX_Size() int {
	return xxx_messageInfo_Trace_QueryPlanNode_ResponsePathElement.Size(m)
}
func (m *Trace_QueryPlanNode_ResponsePathElement) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace_QueryPlanNode_ResponsePathElement.DiscardUnknown(m)
}

var xxx_messageInfo_Trace_QueryPlanNode_ResponsePathElement proto.InternalMessageInfo

type isTrace_QueryPlanNode_ResponsePathElement_Id interface {
	isTrace_QueryPlanNode_ResponsePathElement_Id()
}

type Trace_QueryPlanNode_ResponsePathElement_FieldName struct {
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3,oneof"`
}

type Trace_QueryPlanNode_ResponsePathElement_Index struct {
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3,oneof"`
}

func (*Trace_QueryPlanNode_ResponsePathElement_FieldName) isTrace_QueryPlanNode_ResponsePathElement_Id() {
}

func (*Trace_QueryPlanNode_ResponsePathElement_Index) isTrace_QueryPlanNode_ResponsePathElement_Id() {}

func (m *Trace_QueryPlanNode_ResponsePathElement) GetId() isTrace_QueryPlanNode_ResponsePathElement_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Trace_QueryPlanNode_ResponsePathElement) GetFieldName() string {
	if x, ok := m.GetId().(*Trace_QueryPlanNode_ResponsePathElement_FieldName); ok {
		return x.FieldName
	}
	return ""
}

func (m *Trace_QueryPlanNode_ResponsePathElement) GetIndex() uint32 {
	if x, ok := m.GetId().(*Trace_QueryPlanNode_ResponsePathElement_Index); ok {
		return x.Index
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Trace_QueryPlanNode_ResponsePathElement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Trace_QueryPlanNode_ResponsePathElement_FieldName)(nil),
		(*Trace_QueryPlanNode_ResponsePathElement_Index)(nil),
	}
}

// The `service` value embedded within the header key is not guaranteed to contain an actual service,
// and, in most cases, the service information is trusted to come from upstream processing. If the
// service _is_ specified in this header, then it is checked to match the context that is reporting it.
// Otherwise, the service information is deduced from the token context of the reporter and then sent
// along via other mechanisms (in Kafka, the `ReportKafkaKey). The other information (hostname,
// agent_version, etc.) is sent by the Apollo Engine Reporting agent, but we do not currently save that
// information to any of our persistent storage.
type ReportHeader struct {
	Service string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	// eg "host-01.example.com"
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// eg "engineproxy 0.1.0"
	AgentVersion string `protobuf:"bytes,6,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	// eg "prod-4279-20160804T065423Z-5-g3cf0aa8" (taken from `git describe --tags`)
	ServiceVersion string `protobuf:"bytes,7,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// eg "node v4.6.0"
	RuntimeVersion string `protobuf:"bytes,8,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	// eg "Linux box 4.6.5-1-ec2 #1 SMP Mon Aug 1 02:31:38 PDT 2016 x86_64 GNU/Linux"
	Uname string `protobuf:"bytes,9,opt,name=uname,proto3" json:"uname,omitempty"`
	// eg "current", "prod"
	SchemaTag string `protobuf:"bytes,10,opt,name=schema_tag,json=schemaTag,proto3" json:"schema_tag,omitempty"`
	// The hex representation of the sha512 of the introspection response
	SchemaHash           string   `protobuf:"bytes,11,opt,name=schema_hash,json=schemaHash,proto3" json:"schema_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportHeader) Reset()         { *m = ReportHeader{} }
func (m *ReportHeader) String() string { return proto.CompactTextString(m) }
func (*ReportHeader) ProtoMessage()    {}
func (*ReportHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{1}
}

func (m *ReportHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportHeader.Unmarshal(m, b)
}
func (m *ReportHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportHeader.Marshal(b, m, deterministic)
}
func (m *ReportHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportHeader.Merge(m, src)
}
func (m *ReportHeader) XXX_Size() int {
	return xxx_messageInfo_ReportHeader.Size(m)
}
func (m *ReportHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ReportHeader proto.InternalMessageInfo

func (m *ReportHeader) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ReportHeader) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ReportHeader) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

func (m *ReportHeader) GetServiceVersion() string {
	if m != nil {
		return m.ServiceVersion
	}
	return ""
}

func (m *ReportHeader) GetRuntimeVersion() string {
	if m != nil {
		return m.RuntimeVersion
	}
	return ""
}

func (m *ReportHeader) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *ReportHeader) GetSchemaTag() string {
	if m != nil {
		return m.SchemaTag
	}
	return ""
}

func (m *ReportHeader) GetSchemaHash() string {
	if m != nil {
		return m.SchemaHash
	}
	return ""
}

type PathErrorStats struct {
	Children                map[string]*PathErrorStats `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ErrorsCount             uint64                     `protobuf:"varint,4,opt,name=errors_count,json=errorsCount,proto3" json:"errors_count,omitempty"`
	RequestsWithErrorsCount uint64                     `protobuf:"varint,5,opt,name=requests_with_errors_count,json=requestsWithErrorsCount,proto3" json:"requests_with_errors_count,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                   `json:"-"`
	XXX_unrecognized        []byte                     `json:"-"`
	XXX_sizecache           int32                      `json:"-"`
}

func (m *PathErrorStats) Reset()         { *m = PathErrorStats{} }
func (m *PathErrorStats) String() string { return proto.CompactTextString(m) }
func (*PathErrorStats) ProtoMessage()    {}
func (*PathErrorStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{2}
}

func (m *PathErrorStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathErrorStats.Unmarshal(m, b)
}
func (m *PathErrorStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathErrorStats.Marshal(b, m, deterministic)
}
func (m *PathErrorStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathErrorStats.Merge(m, src)
}
func (m *PathErrorStats) XXX_Size() int {
	return xxx_messageInfo_PathErrorStats.Size(m)
}
func (m *PathErrorStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PathErrorStats.DiscardUnknown(m)
}

var xxx_messageInfo_PathErrorStats proto.InternalMessageInfo

func (m *PathErrorStats) GetChildren() map[string]*PathErrorStats {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *PathErrorStats) GetErrorsCount() uint64 {
	if m != nil {
		return m.ErrorsCount
	}
	return 0
}

func (m *PathErrorStats) GetRequestsWithErrorsCount() uint64 {
	if m != nil {
		return m.RequestsWithErrorsCount
	}
	return 0
}

type ClientNameStats struct {
	// Duration histogram for non-cache-hit queries.
	// (See docs/histograms.md for the histogram format.)
	LatencyCount []int64 `protobuf:"varint,1,rep,packed,name=latency_count,json=latencyCount,proto3" json:"latency_count,omitempty"`
	// These per-version fields were used to understand what versions contributed to this sample
	// when we were implementing the aggregation of this information ourselves using BigTable.
	// However, since the per-version stats don't separate out latency, it makes more sense to
	// have stats reported with contextual information so we can have the specific breakdown we're
	// looking for. These fields are somewhat misleading as we never actually do any per-version
	// awareness with anything reporting in the legacy "per_client_name" stats, and instead use
	// "query_stats_with_context" to have more contextual information.
	RequestsCountPerVersion            map[string]uint64 `protobuf:"bytes,3,rep,name=requests_count_per_version,json=requestsCountPerVersion,proto3" json:"requests_count_per_version,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CacheHitsPerVersion                map[string]uint64 `protobuf:"bytes,4,rep,name=cache_hits_per_version,json=cacheHitsPerVersion,proto3" json:"cache_hits_per_version,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PersistedQueryHitsPerVersion       map[string]uint64 `protobuf:"bytes,10,rep,name=persisted_query_hits_per_version,json=persistedQueryHitsPerVersion,proto3" json:"persisted_query_hits_per_version,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PersistedQueryMissesPerVersion     map[string]uint64 `protobuf:"bytes,11,rep,name=persisted_query_misses_per_version,json=persistedQueryMissesPerVersion,proto3" json:"persisted_query_misses_per_version,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RegisteredOperationCountPerVersion map[string]uint64 `protobuf:"bytes,12,rep,name=registered_operation_count_per_version,json=registeredOperationCountPerVersion,proto3" json:"registered_operation_count_per_version,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ForbiddenOperationCountPerVersion  map[string]uint64 `protobuf:"bytes,13,rep,name=forbidden_operation_count_per_version,json=forbiddenOperationCountPerVersion,proto3" json:"forbidden_operation_count_per_version,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CacheLatencyCount                  []int64           `protobuf:"varint,5,rep,packed,name=cache_latency_count,json=cacheLatencyCount,proto3" json:"cache_latency_count,omitempty"`
	RootErrorStats                     *PathErrorStats   `protobuf:"bytes,6,opt,name=root_error_stats,json=rootErrorStats,proto3" json:"root_error_stats,omitempty"`
	RequestsWithErrorsCount            uint64            `protobuf:"varint,7,opt,name=requests_with_errors_count,json=requestsWithErrorsCount,proto3" json:"requests_with_errors_count,omitempty"`
	// TTL histograms for cache misses for the public cache.
	PublicCacheTtlCount []int64 `protobuf:"varint,8,rep,packed,name=public_cache_ttl_count,json=publicCacheTtlCount,proto3" json:"public_cache_ttl_count,omitempty"`
	// TTL histograms for cache misses for the private cache.
	PrivateCacheTtlCount []int64  `protobuf:"varint,9,rep,packed,name=private_cache_ttl_count,json=privateCacheTtlCount,proto3" json:"private_cache_ttl_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientNameStats) Reset()         { *m = ClientNameStats{} }
func (m *ClientNameStats) String() string { return proto.CompactTextString(m) }
func (*ClientNameStats) ProtoMessage()    {}
func (*ClientNameStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{3}
}

func (m *ClientNameStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientNameStats.Unmarshal(m, b)
}
func (m *ClientNameStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientNameStats.Marshal(b, m, deterministic)
}
func (m *ClientNameStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientNameStats.Merge(m, src)
}
func (m *ClientNameStats) XXX_Size() int {
	return xxx_messageInfo_ClientNameStats.Size(m)
}
func (m *ClientNameStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientNameStats.DiscardUnknown(m)
}

var xxx_messageInfo_ClientNameStats proto.InternalMessageInfo

func (m *ClientNameStats) GetLatencyCount() []int64 {
	if m != nil {
		return m.LatencyCount
	}
	return nil
}

func (m *ClientNameStats) GetRequestsCountPerVersion() map[string]uint64 {
	if m != nil {
		return m.RequestsCountPerVersion
	}
	return nil
}

func (m *ClientNameStats) GetCacheHitsPerVersion() map[string]uint64 {
	if m != nil {
		return m.CacheHitsPerVersion
	}
	return nil
}

func (m *ClientNameStats) GetPersistedQueryHitsPerVersion() map[string]uint64 {
	if m != nil {
		return m.PersistedQueryHitsPerVersion
	}
	return nil
}

func (m *ClientNameStats) GetPersistedQueryMissesPerVersion() map[string]uint64 {
	if m != nil {
		return m.PersistedQueryMissesPerVersion
	}
	return nil
}

func (m *ClientNameStats) GetRegisteredOperationCountPerVersion() map[string]uint64 {
	if m != nil {
		return m.RegisteredOperationCountPerVersion
	}
	return nil
}

func (m *ClientNameStats) GetForbiddenOperationCountPerVersion() map[string]uint64 {
	if m != nil {
		return m.ForbiddenOperationCountPerVersion
	}
	return nil
}

func (m *ClientNameStats) GetCacheLatencyCount() []int64 {
	if m != nil {
		return m.CacheLatencyCount
	}
	return nil
}

func (m *ClientNameStats) GetRootErrorStats() *PathErrorStats {
	if m != nil {
		return m.RootErrorStats
	}
	return nil
}

func (m *ClientNameStats) GetRequestsWithErrorsCount() uint64 {
	if m != nil {
		return m.RequestsWithErrorsCount
	}
	return 0
}

func (m *ClientNameStats) GetPublicCacheTtlCount() []int64 {
	if m != nil {
		return m.PublicCacheTtlCount
	}
	return nil
}

func (m *ClientNameStats) GetPrivateCacheTtlCount() []int64 {
	if m != nil {
		return m.PrivateCacheTtlCount
	}
	return nil
}

type QueryLatencyStats struct {
	LatencyCount             []int64         `protobuf:"varint,1,rep,packed,name=latency_count,json=latencyCount,proto3" json:"latency_count,omitempty"`
	RequestCount             uint64          `protobuf:"varint,2,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	CacheHits                uint64          `protobuf:"varint,3,opt,name=cache_hits,json=cacheHits,proto3" json:"cache_hits,omitempty"`
	PersistedQueryHits       uint64          `protobuf:"varint,4,opt,name=persisted_query_hits,json=persistedQueryHits,proto3" json:"persisted_query_hits,omitempty"`
	PersistedQueryMisses     uint64          `protobuf:"varint,5,opt,name=persisted_query_misses,json=persistedQueryMisses,proto3" json:"persisted_query_misses,omitempty"`
	CacheLatencyCount        []int64         `protobuf:"varint,6,rep,packed,name=cache_latency_count,json=cacheLatencyCount,proto3" json:"cache_latency_count,omitempty"`
	RootErrorStats           *PathErrorStats `protobuf:"bytes,7,opt,name=root_error_stats,json=rootErrorStats,proto3" json:"root_error_stats,omitempty"`
	RequestsWithErrorsCount  uint64          `protobuf:"varint,8,opt,name=requests_with_errors_count,json=requestsWithErrorsCount,proto3" json:"requests_with_errors_count,omitempty"`
	PublicCacheTtlCount      []int64         `protobuf:"varint,9,rep,packed,name=public_cache_ttl_count,json=publicCacheTtlCount,proto3" json:"public_cache_ttl_count,omitempty"`
	PrivateCacheTtlCount     []int64         `protobuf:"varint,10,rep,packed,name=private_cache_ttl_count,json=privateCacheTtlCount,proto3" json:"private_cache_ttl_count,omitempty"`
	RegisteredOperationCount uint64          `protobuf:"varint,11,opt,name=registered_operation_count,json=registeredOperationCount,proto3" json:"registered_operation_count,omitempty"`
	ForbiddenOperationCount  uint64          `protobuf:"varint,12,opt,name=forbidden_operation_count,json=forbiddenOperationCount,proto3" json:"forbidden_operation_count,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}        `json:"-"`
	XXX_unrecognized         []byte          `json:"-"`
	XXX_sizecache            int32           `json:"-"`
}

func (m *QueryLatencyStats) Reset()         { *m = QueryLatencyStats{} }
func (m *QueryLatencyStats) String() string { return proto.CompactTextString(m) }
func (*QueryLatencyStats) ProtoMessage()    {}
func (*QueryLatencyStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{4}
}

func (m *QueryLatencyStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryLatencyStats.Unmarshal(m, b)
}
func (m *QueryLatencyStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryLatencyStats.Marshal(b, m, deterministic)
}
func (m *QueryLatencyStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatencyStats.Merge(m, src)
}
func (m *QueryLatencyStats) XXX_Size() int {
	return xxx_messageInfo_QueryLatencyStats.Size(m)
}
func (m *QueryLatencyStats) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatencyStats.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatencyStats proto.InternalMessageInfo

func (m *QueryLatencyStats) GetLatencyCount() []int64 {
	if m != nil {
		return m.LatencyCount
	}
	return nil
}

func (m *QueryLatencyStats) GetRequestCount() uint64 {
	if m != nil {
		return m.RequestCount
	}
	return 0
}

func (m *QueryLatencyStats) GetCacheHits() uint64 {
	if m != nil {
		return m.CacheHits
	}
	return 0
}

func (m *QueryLatencyStats) GetPersistedQueryHits() uint64 {
	if m != nil {
		return m.PersistedQueryHits
	}
	return 0
}

func (m *QueryLatencyStats) GetPersistedQueryMisses() uint64 {
	if m != nil {
		return m.PersistedQueryMisses
	}
	return 0
}

func (m *QueryLatencyStats) GetCacheLatencyCount() []int64 {
	if m != nil {
		return m.CacheLatencyCount
	}
	return nil
}

func (m *QueryLatencyStats) GetRootErrorStats() *PathErrorStats {
	if m != nil {
		return m.RootErrorStats
	}
	return nil
}

func (m *QueryLatencyStats) GetRequestsWithErrorsCount() uint64 {
	if m != nil {
		return m.RequestsWithErrorsCount
	}
	return 0
}

func (m *QueryLatencyStats) GetPublicCacheTtlCount() []int64 {
	if m != nil {
		return m.PublicCacheTtlCount
	}
	return nil
}

func (m *QueryLatencyStats) GetPrivateCacheTtlCount() []int64 {
	if m != nil {
		return m.PrivateCacheTtlCount
	}
	return nil
}

func (m *QueryLatencyStats) GetRegisteredOperationCount() uint64 {
	if m != nil {
		return m.RegisteredOperationCount
	}
	return 0
}

func (m *QueryLatencyStats) GetForbiddenOperationCount() uint64 {
	if m != nil {
		return m.ForbiddenOperationCount
	}
	return 0
}

type StatsContext struct {
	ClientReferenceId    string   `protobuf:"bytes,1,opt,name=client_reference_id,json=clientReferenceId,proto3" json:"client_reference_id,omitempty"`
	ClientName           string   `protobuf:"bytes,2,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClientVersion        string   `protobuf:"bytes,3,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsContext) Reset()         { *m = StatsContext{} }
func (m *StatsContext) String() string { return proto.CompactTextString(m) }
func (*StatsContext) ProtoMessage()    {}
func (*StatsContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{5}
}

func (m *StatsContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsContext.Unmarshal(m, b)
}
func (m *StatsContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsContext.Marshal(b, m, deterministic)
}
func (m *StatsContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsContext.Merge(m, src)
}
func (m *StatsContext) XXX_Size() int {
	return xxx_messageInfo_StatsContext.Size(m)
}
func (m *StatsContext) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsContext.DiscardUnknown(m)
}

var xxx_messageInfo_StatsContext proto.InternalMessageInfo

func (m *StatsContext) GetClientReferenceId() string {
	if m != nil {
		return m.ClientReferenceId
	}
	return ""
}

func (m *StatsContext) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *StatsContext) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

type ContextualizedQueryLatencyStats struct {
	QueryLatencyStats    *QueryLatencyStats `protobuf:"bytes,1,opt,name=query_latency_stats,json=queryLatencyStats,proto3" json:"query_latency_stats,omitempty"`
	Context              *StatsContext      `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ContextualizedQueryLatencyStats) Reset()         { *m = ContextualizedQueryLatencyStats{} }
func (m *ContextualizedQueryLatencyStats) String() string { return proto.CompactTextString(m) }
func (*ContextualizedQueryLatencyStats) ProtoMessage()    {}
func (*ContextualizedQueryLatencyStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{6}
}

func (m *ContextualizedQueryLatencyStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContextualizedQueryLatencyStats.Unmarshal(m, b)
}
func (m *ContextualizedQueryLatencyStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContextualizedQueryLatencyStats.Marshal(b, m, deterministic)
}
func (m *ContextualizedQueryLatencyStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContextualizedQueryLatencyStats.Merge(m, src)
}
func (m *ContextualizedQueryLatencyStats) XXX_Size() int {
	return xxx_messageInfo_ContextualizedQueryLatencyStats.Size(m)
}
func (m *ContextualizedQueryLatencyStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContextualizedQueryLatencyStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContextualizedQueryLatencyStats proto.InternalMessageInfo

func (m *ContextualizedQueryLatencyStats) GetQueryLatencyStats() *QueryLatencyStats {
	if m != nil {
		return m.QueryLatencyStats
	}
	return nil
}

func (m *ContextualizedQueryLatencyStats) GetContext() *StatsContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type ContextualizedTypeStats struct {
	Context              *StatsContext        `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	PerTypeStat          map[string]*TypeStat `protobuf:"bytes,2,rep,name=per_type_stat,json=perTypeStat,proto3" json:"per_type_stat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ContextualizedTypeStats) Reset()         { *m = ContextualizedTypeStats{} }
func (m *ContextualizedTypeStats) String() string { return proto.CompactTextString(m) }
func (*ContextualizedTypeStats) ProtoMessage()    {}
func (*ContextualizedTypeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{7}
}

func (m *ContextualizedTypeStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContextualizedTypeStats.Unmarshal(m, b)
}
func (m *ContextualizedTypeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContextualizedTypeStats.Marshal(b, m, deterministic)
}
func (m *ContextualizedTypeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContextualizedTypeStats.Merge(m, src)
}
func (m *ContextualizedTypeStats) XXX_Size() int {
	return xxx_messageInfo_ContextualizedTypeStats.Size(m)
}
func (m *ContextualizedTypeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ContextualizedTypeStats.DiscardUnknown(m)
}

var xxx_messageInfo_ContextualizedTypeStats proto.InternalMessageInfo

func (m *ContextualizedTypeStats) GetContext() *StatsContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *ContextualizedTypeStats) GetPerTypeStat() map[string]*TypeStat {
	if m != nil {
		return m.PerTypeStat
	}
	return nil
}

type FieldStat struct {
	Name                    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ReturnType              string   `protobuf:"bytes,3,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
	ErrorsCount             uint64   `protobuf:"varint,4,opt,name=errors_count,json=errorsCount,proto3" json:"errors_count,omitempty"`
	Count                   uint64   `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	RequestsWithErrorsCount uint64   `protobuf:"varint,6,opt,name=requests_with_errors_count,json=requestsWithErrorsCount,proto3" json:"requests_with_errors_count,omitempty"`
	LatencyCount            []int64  `protobuf:"varint,8,rep,packed,name=latency_count,json=latencyCount,proto3" json:"latency_count,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *FieldStat) Reset()         { *m = FieldStat{} }
func (m *FieldStat) String() string { return proto.CompactTextString(m) }
func (*FieldStat) ProtoMessage()    {}
func (*FieldStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{8}
}

func (m *FieldStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldStat.Unmarshal(m, b)
}
func (m *FieldStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldStat.Marshal(b, m, deterministic)
}
func (m *FieldStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldStat.Merge(m, src)
}
func (m *FieldStat) XXX_Size() int {
	return xxx_messageInfo_FieldStat.Size(m)
}
func (m *FieldStat) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldStat.DiscardUnknown(m)
}

var xxx_messageInfo_FieldStat proto.InternalMessageInfo

func (m *FieldStat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldStat) GetReturnType() string {
	if m != nil {
		return m.ReturnType
	}
	return ""
}

func (m *FieldStat) GetErrorsCount() uint64 {
	if m != nil {
		return m.ErrorsCount
	}
	return 0
}

func (m *FieldStat) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FieldStat) GetRequestsWithErrorsCount() uint64 {
	if m != nil {
		return m.RequestsWithErrorsCount
	}
	return 0
}

func (m *FieldStat) GetLatencyCount() []int64 {
	if m != nil {
		return m.LatencyCount
	}
	return nil
}

type TypeStat struct {
	Name  string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Field []*FieldStat `protobuf:"bytes,2,rep,name=field,proto3" json:"field,omitempty"`
	// Key is (eg) "email" for User.email:String!
	PerFieldStat         map[string]*FieldStat `protobuf:"bytes,3,rep,name=per_field_stat,json=perFieldStat,proto3" json:"per_field_stat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TypeStat) Reset()         { *m = TypeStat{} }
func (m *TypeStat) String() string { return proto.CompactTextString(m) }
func (*TypeStat) ProtoMessage()    {}
func (*TypeStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{9}
}

func (m *TypeStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeStat.Unmarshal(m, b)
}
func (m *TypeStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeStat.Marshal(b, m, deterministic)
}
func (m *TypeStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeStat.Merge(m, src)
}
func (m *TypeStat) XXX_Size() int {
	return xxx_messageInfo_TypeStat.Size(m)
}
func (m *TypeStat) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeStat.DiscardUnknown(m)
}

var xxx_messageInfo_TypeStat proto.InternalMessageInfo

func (m *TypeStat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TypeStat) GetField() []*FieldStat {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *TypeStat) GetPerFieldStat() map[string]*FieldStat {
	if m != nil {
		return m.PerFieldStat
	}
	return nil
}

type QueryStats struct {
	// Either per_client_name (for back-compat) or query_stats_with_context must be specified. If both are
	// specified, then query_stats_with_context will be used and per_client_name will be ignored. Although
	// the fields in ClientNameStats mention things "per-version," the information in the "per-version"
	// fields will only ever be over the default version, the empty String: "", if arrived at via the
	// FullTracesAggregator.
	PerClientName         map[string]*ClientNameStats        `protobuf:"bytes,1,rep,name=per_client_name,json=perClientName,proto3" json:"per_client_name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	QueryStatsWithContext []*ContextualizedQueryLatencyStats `protobuf:"bytes,4,rep,name=query_stats_with_context,json=queryStatsWithContext,proto3" json:"query_stats_with_context,omitempty"`
	PerType               []*TypeStat                        `protobuf:"bytes,2,rep,name=per_type,json=perType,proto3" json:"per_type,omitempty"`
	// Key is the parent type, e.g. "User" for User.email:String!
	PerTypeStat          map[string]*TypeStat       `protobuf:"bytes,3,rep,name=per_type_stat,json=perTypeStat,proto3" json:"per_type_stat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TypeStatsWithContext []*ContextualizedTypeStats `protobuf:"bytes,5,rep,name=type_stats_with_context,json=typeStatsWithContext,proto3" json:"type_stats_with_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *QueryStats) Reset()         { *m = QueryStats{} }
func (m *QueryStats) String() string { return proto.CompactTextString(m) }
func (*QueryStats) ProtoMessage()    {}
func (*QueryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{10}
}

func (m *QueryStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryStats.Unmarshal(m, b)
}
func (m *QueryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryStats.Marshal(b, m, deterministic)
}
func (m *QueryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStats.Merge(m, src)
}
func (m *QueryStats) XXX_Size() int {
	return xxx_messageInfo_QueryStats.Size(m)
}
func (m *QueryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStats.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStats proto.InternalMessageInfo

func (m *QueryStats) GetPerClientName() map[string]*ClientNameStats {
	if m != nil {
		return m.PerClientName
	}
	return nil
}

func (m *QueryStats) GetQueryStatsWithContext() []*ContextualizedQueryLatencyStats {
	if m != nil {
		return m.QueryStatsWithContext
	}
	return nil
}

func (m *QueryStats) GetPerType() []*TypeStat {
	if m != nil {
		return m.PerType
	}
	return nil
}

func (m *QueryStats) GetPerTypeStat() map[string]*TypeStat {
	if m != nil {
		return m.PerTypeStat
	}
	return nil
}

func (m *QueryStats) GetTypeStatsWithContext() []*ContextualizedTypeStats {
	if m != nil {
		return m.TypeStatsWithContext
	}
	return nil
}

// Top-level message type for the server-side traces endpoint
type TracesReport struct {
	Header               *ReportHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Trace                []*Trace      `protobuf:"bytes,2,rep,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TracesReport) Reset()         { *m = TracesReport{} }
func (m *TracesReport) String() string { return proto.CompactTextString(m) }
func (*TracesReport) ProtoMessage()    {}
func (*TracesReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{11}
}

func (m *TracesReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracesReport.Unmarshal(m, b)
}
func (m *TracesReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracesReport.Marshal(b, m, deterministic)
}
func (m *TracesReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracesReport.Merge(m, src)
}
func (m *TracesReport) XXX_Size() int {
	return xxx_messageInfo_TracesReport.Size(m)
}
func (m *TracesReport) XXX_DiscardUnknown() {
	xxx_messageInfo_TracesReport.DiscardUnknown(m)
}

var xxx_messageInfo_TracesReport proto.InternalMessageInfo

func (m *TracesReport) GetHeader() *ReportHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TracesReport) GetTrace() []*Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type Field struct {
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ReturnType           string   `protobuf:"bytes,3,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Field) Reset()         { *m = Field{} }
func (m *Field) String() string { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()    {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{12}
}

func (m *Field) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Field.Unmarshal(m, b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Field.Marshal(b, m, deterministic)
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return xxx_messageInfo_Field.Size(m)
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetReturnType() string {
	if m != nil {
		return m.ReturnType
	}
	return ""
}

type Type struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Field                []*Field `protobuf:"bytes,2,rep,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Type) Reset()         { *m = Type{} }
func (m *Type) String() string { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()    {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{13}
}

func (m *Type) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Type.Unmarshal(m, b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Type.Marshal(b, m, deterministic)
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return xxx_messageInfo_Type.Size(m)
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

func (m *Type) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Type) GetField() []*Field {
	if m != nil {
		return m.Field
	}
	return nil
}

type MemStats struct {
	TotalBytes                uint64   `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	StackBytes                uint64   `protobuf:"varint,2,opt,name=stack_bytes,json=stackBytes,proto3" json:"stack_bytes,omitempty"`
	HeapBytes                 uint64   `protobuf:"varint,3,opt,name=heap_bytes,json=heapBytes,proto3" json:"heap_bytes,omitempty"`
	HeapReleasedBytes         uint64   `protobuf:"varint,13,opt,name=heap_released_bytes,json=heapReleasedBytes,proto3" json:"heap_released_bytes,omitempty"`
	GcOverheadBytes           uint64   `protobuf:"varint,4,opt,name=gc_overhead_bytes,json=gcOverheadBytes,proto3" json:"gc_overhead_bytes,omitempty"`
	StackUsedBytes            uint64   `protobuf:"varint,5,opt,name=stack_used_bytes,json=stackUsedBytes,proto3" json:"stack_used_bytes,omitempty"`
	HeapAllocatedBytes        uint64   `protobuf:"varint,6,opt,name=heap_allocated_bytes,json=heapAllocatedBytes,proto3" json:"heap_allocated_bytes,omitempty"`
	HeapAllocatedObjects      uint64   `protobuf:"varint,7,opt,name=heap_allocated_objects,json=heapAllocatedObjects,proto3" json:"heap_allocated_objects,omitempty"`
	HeapAllocatedBytesDelta   uint64   `protobuf:"varint,8,opt,name=heap_allocated_bytes_delta,json=heapAllocatedBytesDelta,proto3" json:"heap_allocated_bytes_delta,omitempty"`
	HeapAllocatedObjectsDelta uint64   `protobuf:"varint,9,opt,name=heap_allocated_objects_delta,json=heapAllocatedObjectsDelta,proto3" json:"heap_allocated_objects_delta,omitempty"`
	HeapFreedObjectsDelta     uint64   `protobuf:"varint,10,opt,name=heap_freed_objects_delta,json=heapFreedObjectsDelta,proto3" json:"heap_freed_objects_delta,omitempty"`
	GcStwNsDelta              uint64   `protobuf:"varint,11,opt,name=gc_stw_ns_delta,json=gcStwNsDelta,proto3" json:"gc_stw_ns_delta,omitempty"`
	GcCountDelta              uint64   `protobuf:"varint,12,opt,name=gc_count_delta,json=gcCountDelta,proto3" json:"gc_count_delta,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *MemStats) Reset()         { *m = MemStats{} }
func (m *MemStats) String() string { return proto.CompactTextString(m) }
func (*MemStats) ProtoMessage()    {}
func (*MemStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{14}
}

func (m *MemStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemStats.Unmarshal(m, b)
}
func (m *MemStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemStats.Marshal(b, m, deterministic)
}
func (m *MemStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemStats.Merge(m, src)
}
func (m *MemStats) XXX_Size() int {
	return xxx_messageInfo_MemStats.Size(m)
}
func (m *MemStats) XXX_DiscardUnknown() {
	xxx_messageInfo_MemStats.DiscardUnknown(m)
}

var xxx_messageInfo_MemStats proto.InternalMessageInfo

func (m *MemStats) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *MemStats) GetStackBytes() uint64 {
	if m != nil {
		return m.StackBytes
	}
	return 0
}

func (m *MemStats) GetHeapBytes() uint64 {
	if m != nil {
		return m.HeapBytes
	}
	return 0
}

func (m *MemStats) GetHeapReleasedBytes() uint64 {
	if m != nil {
		return m.HeapReleasedBytes
	}
	return 0
}

func (m *MemStats) GetGcOverheadBytes() uint64 {
	if m != nil {
		return m.GcOverheadBytes
	}
	return 0
}

func (m *MemStats) GetStackUsedBytes() uint64 {
	if m != nil {
		return m.StackUsedBytes
	}
	return 0
}

func (m *MemStats) GetHeapAllocatedBytes() uint64 {
	if m != nil {
		return m.HeapAllocatedBytes
	}
	return 0
}

func (m *MemStats) GetHeapAllocatedObjects() uint64 {
	if m != nil {
		return m.HeapAllocatedObjects
	}
	return 0
}

func (m *MemStats) GetHeapAllocatedBytesDelta() uint64 {
	if m != nil {
		return m.HeapAllocatedBytesDelta
	}
	return 0
}

func (m *MemStats) GetHeapAllocatedObjectsDelta() uint64 {
	if m != nil {
		return m.HeapAllocatedObjectsDelta
	}
	return 0
}

func (m *MemStats) GetHeapFreedObjectsDelta() uint64 {
	if m != nil {
		return m.HeapFreedObjectsDelta
	}
	return 0
}

func (m *MemStats) GetGcStwNsDelta() uint64 {
	if m != nil {
		return m.GcStwNsDelta
	}
	return 0
}

func (m *MemStats) GetGcCountDelta() uint64 {
	if m != nil {
		return m.GcCountDelta
	}
	return 0
}

type TimeStats struct {
	UptimeNs             uint64   `protobuf:"varint,1,opt,name=uptime_ns,json=uptimeNs,proto3" json:"uptime_ns,omitempty"`
	RealNsDelta          uint64   `protobuf:"varint,2,opt,name=real_ns_delta,json=realNsDelta,proto3" json:"real_ns_delta,omitempty"`
	UserNsDelta          uint64   `protobuf:"varint,3,opt,name=user_ns_delta,json=userNsDelta,proto3" json:"user_ns_delta,omitempty"`
	SysNsDelta           uint64   `protobuf:"varint,4,opt,name=sys_ns_delta,json=sysNsDelta,proto3" json:"sys_ns_delta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeStats) Reset()         { *m = TimeStats{} }
func (m *TimeStats) String() string { return proto.CompactTextString(m) }
func (*TimeStats) ProtoMessage()    {}
func (*TimeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{15}
}

func (m *TimeStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeStats.Unmarshal(m, b)
}
func (m *TimeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeStats.Marshal(b, m, deterministic)
}
func (m *TimeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeStats.Merge(m, src)
}
func (m *TimeStats) XXX_Size() int {
	return xxx_messageInfo_TimeStats.Size(m)
}
func (m *TimeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeStats.DiscardUnknown(m)
}

var xxx_messageInfo_TimeStats proto.InternalMessageInfo

func (m *TimeStats) GetUptimeNs() uint64 {
	if m != nil {
		return m.UptimeNs
	}
	return 0
}

func (m *TimeStats) GetRealNsDelta() uint64 {
	if m != nil {
		return m.RealNsDelta
	}
	return 0
}

func (m *TimeStats) GetUserNsDelta() uint64 {
	if m != nil {
		return m.UserNsDelta
	}
	return 0
}

func (m *TimeStats) GetSysNsDelta() uint64 {
	if m != nil {
		return m.SysNsDelta
	}
	return 0
}

// Top-level message type for the server-side stats endpoint
type StatsReport struct {
	Header *ReportHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// These fields are about properties of the engineproxy and are not generated
	// from FullTracesReports.
	MemStats  *MemStats  `protobuf:"bytes,2,opt,name=mem_stats,json=memStats,proto3" json:"mem_stats,omitempty"`
	TimeStats *TimeStats `protobuf:"bytes,3,opt,name=time_stats,json=timeStats,proto3" json:"time_stats,omitempty"`
	// Beginning of the period over which stats are collected.
	StartTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End of the period of which stats are collected.
	EndTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Only used to interpret mem_stats and time_stats; not generated from
	// FullTracesReports.
	RealtimeDuration uint64 `protobuf:"varint,10,opt,name=realtime_duration,json=realtimeDuration,proto3" json:"realtime_duration,omitempty"`
	// Maps from query descriptor to QueryStats. Required unless
	// legacy_per_query_missing_operation_name is set. The keys are strings of the
	// form `# operationName\nsignature` (literal hash and space), with
	// operationName - if there is no operation name.
	PerQuery map[string]*QueryStats `protobuf:"bytes,14,rep,name=per_query,json=perQuery,proto3" json:"per_query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Older agents (Go engineproxy) didn't explicitly include the operation name
	// in the key of this map, and the server had to parse it out (after a
	// re-signing operation which is no longer performed). The key here is just the query
	// signature. Deprecated.
	LegacyPerQueryImplicitOperationName map[string]*QueryStats `protobuf:"bytes,12,rep,name=legacy_per_query_implicit_operation_name,json=legacyPerQueryImplicitOperationName,proto3" json:"legacy_per_query_implicit_operation_name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deprecated: it was useful in Optics where we had access to the whole schema
	// but has not been ever used in Engine.  apollo-engine-reporting will not
	// send it.
	Type                 []*Type  `protobuf:"bytes,13,rep,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsReport) Reset()         { *m = StatsReport{} }
func (m *StatsReport) String() string { return proto.CompactTextString(m) }
func (*StatsReport) ProtoMessage()    {}
func (*StatsReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{16}
}

func (m *StatsReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsReport.Unmarshal(m, b)
}
func (m *StatsReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsReport.Marshal(b, m, deterministic)
}
func (m *StatsReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsReport.Merge(m, src)
}
func (m *StatsReport) XXX_Size() int {
	return xxx_messageInfo_StatsReport.Size(m)
}
func (m *StatsReport) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsReport.DiscardUnknown(m)
}

var xxx_messageInfo_StatsReport proto.InternalMessageInfo

func (m *StatsReport) GetHeader() *ReportHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StatsReport) GetMemStats() *MemStats {
	if m != nil {
		return m.MemStats
	}
	return nil
}

func (m *StatsReport) GetTimeStats() *TimeStats {
	if m != nil {
		return m.TimeStats
	}
	return nil
}

func (m *StatsReport) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StatsReport) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *StatsReport) GetRealtimeDuration() uint64 {
	if m != nil {
		return m.RealtimeDuration
	}
	return 0
}

func (m *StatsReport) GetPerQuery() map[string]*QueryStats {
	if m != nil {
		return m.PerQuery
	}
	return nil
}

func (m *StatsReport) GetLegacyPerQueryImplicitOperationName() map[string]*QueryStats {
	if m != nil {
		return m.LegacyPerQueryImplicitOperationName
	}
	return nil
}

func (m *StatsReport) GetType() []*Type {
	if m != nil {
		return m.Type
	}
	return nil
}

// This is the top-level message used by the new traces ingress. This
// is designed for the apollo-engine-reporting TypeScript agent and will
// eventually be documented as a public ingress API. This message consists
// solely of traces; the equivalent of the StatsReport is automatically
// generated server-side from this message.  Agents should send traces
// for all requests in this report.  Generally, buffering up until a large
// size has been reached (say, 4MB) or 5-10 seconds has passed is appropriate.
type FullTracesReport struct {
	Header *ReportHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// key is statsReportKey (# operationName\nsignature) Note that the nested
	// traces will *not* have a signature or details.operationName (because the
	// key is adequate).
	//
	// We also assume that traces don't have
	// legacy_per_query_implicit_operation_name, and we don't require them to have
	// details.raw_query (which would consume a lot of space and has privacy/data
	// access issues, and isn't currently exposed by our app anyway).
	TracesPerQuery       map[string]*Traces `protobuf:"bytes,5,rep,name=traces_per_query,json=tracesPerQuery,proto3" json:"traces_per_query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FullTracesReport) Reset()         { *m = FullTracesReport{} }
func (m *FullTracesReport) String() string { return proto.CompactTextString(m) }
func (*FullTracesReport) ProtoMessage()    {}
func (*FullTracesReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{17}
}

func (m *FullTracesReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FullTracesReport.Unmarshal(m, b)
}
func (m *FullTracesReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FullTracesReport.Marshal(b, m, deterministic)
}
func (m *FullTracesReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullTracesReport.Merge(m, src)
}
func (m *FullTracesReport) XXX_Size() int {
	return xxx_messageInfo_FullTracesReport.Size(m)
}
func (m *FullTracesReport) XXX_DiscardUnknown() {
	xxx_messageInfo_FullTracesReport.DiscardUnknown(m)
}

var xxx_messageInfo_FullTracesReport proto.InternalMessageInfo

func (m *FullTracesReport) GetHeader() *ReportHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *FullTracesReport) GetTracesPerQuery() map[string]*Traces {
	if m != nil {
		return m.TracesPerQuery
	}
	return nil
}

// Just a sequence of traces with the same statsReportKey.
type Traces struct {
	Trace                []*Trace `protobuf:"bytes,1,rep,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Traces) Reset()         { *m = Traces{} }
func (m *Traces) String() string { return proto.CompactTextString(m) }
func (*Traces) ProtoMessage()    {}
func (*Traces) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{18}
}

func (m *Traces) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Traces.Unmarshal(m, b)
}
func (m *Traces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Traces.Marshal(b, m, deterministic)
}
func (m *Traces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Traces.Merge(m, src)
}
func (m *Traces) XXX_Size() int {
	return xxx_messageInfo_Traces.Size(m)
}
func (m *Traces) XXX_DiscardUnknown() {
	xxx_messageInfo_Traces.DiscardUnknown(m)
}

var xxx_messageInfo_Traces proto.InternalMessageInfo

func (m *Traces) GetTrace() []*Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type TraceV1 struct {
	Header               *ReportHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Trace                *Trace        `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TraceV1) Reset()         { *m = TraceV1{} }
func (m *TraceV1) String() string { return proto.CompactTextString(m) }
func (*TraceV1) ProtoMessage()    {}
func (*TraceV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{19}
}

func (m *TraceV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceV1.Unmarshal(m, b)
}
func (m *TraceV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceV1.Marshal(b, m, deterministic)
}
func (m *TraceV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceV1.Merge(m, src)
}
func (m *TraceV1) XXX_Size() int {
	return xxx_messageInfo_TraceV1.Size(m)
}
func (m *TraceV1) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceV1.DiscardUnknown(m)
}

var xxx_messageInfo_TraceV1 proto.InternalMessageInfo

func (m *TraceV1) GetHeader() *ReportHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TraceV1) GetTrace() *Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func init() {
	proto.RegisterEnum("mdg.engine.proto.Trace_CachePolicy_Scope", Trace_CachePolicy_Scope_name, Trace_CachePolicy_Scope_value)
	proto.RegisterEnum("mdg.engine.proto.Trace_HTTP_Method", Trace_HTTP_Method_name, Trace_HTTP_Method_value)
	proto.RegisterType((*Trace)(nil), "mdg.engine.proto.Trace")
	proto.RegisterType((*Trace_CachePolicy)(nil), "mdg.engine.proto.Trace.CachePolicy")
	proto.RegisterType((*Trace_Details)(nil), "mdg.engine.proto.Trace.Details")
	proto.RegisterMapType((map[string][]byte)(nil), "mdg.engine.proto.Trace.Details.VariablesEntry")
	proto.RegisterMapType((map[string]string)(nil), "mdg.engine.proto.Trace.Details.VariablesJsonEntry")
	proto.RegisterType((*Trace_Error)(nil), "mdg.engine.proto.Trace.Error")
	proto.RegisterType((*Trace_HTTP)(nil), "mdg.engine.proto.Trace.HTTP")
	proto.RegisterMapType((map[string]*Trace_HTTP_Values)(nil), "mdg.engine.proto.Trace.HTTP.RequestHeadersEntry")
	proto.RegisterMapType((map[string]*Trace_HTTP_Values)(nil), "mdg.engine.proto.Trace.HTTP.ResponseHeadersEntry")
	proto.RegisterType((*Trace_HTTP_Values)(nil), "mdg.engine.proto.Trace.HTTP.Values")
	proto.RegisterType((*Trace_Location)(nil), "mdg.engine.proto.Trace.Location")
	proto.RegisterType((*Trace_Node)(nil), "mdg.engine.proto.Trace.Node")
	proto.RegisterType((*Trace_QueryPlanNode)(nil), "mdg.engine.proto.Trace.QueryPlanNode")
	proto.RegisterType((*Trace_QueryPlanNode_SequenceNode)(nil), "mdg.engine.proto.Trace.QueryPlanNode.SequenceNode")
	proto.RegisterType((*Trace_QueryPlanNode_ParallelNode)(nil), "mdg.engine.proto.Trace.QueryPlanNode.ParallelNode")
	proto.RegisterType((*Trace_QueryPlanNode_FetchNode)(nil), "mdg.engine.proto.Trace.QueryPlanNode.FetchNode")
	proto.RegisterType((*Trace_QueryPlanNode_FlattenNode)(nil), "mdg.engine.proto.Trace.QueryPlanNode.FlattenNode")
	proto.RegisterType((*Trace_QueryPlanNode_ResponsePathElement)(nil), "mdg.engine.proto.Trace.QueryPlanNode.ResponsePathElement")
	proto.RegisterType((*ReportHeader)(nil), "mdg.engine.proto.ReportHeader")
	proto.RegisterType((*PathErrorStats)(nil), "mdg.engine.proto.PathErrorStats")
	proto.RegisterMapType((map[string]*PathErrorStats)(nil), "mdg.engine.proto.PathErrorStats.ChildrenEntry")
	proto.RegisterType((*ClientNameStats)(nil), "mdg.engine.proto.ClientNameStats")
	proto.RegisterMapType((map[string]uint64)(nil), "mdg.engine.proto.ClientNameStats.CacheHitsPerVersionEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "mdg.engine.proto.ClientNameStats.ForbiddenOperationCountPerVersionEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "mdg.engine.proto.ClientNameStats.PersistedQueryHitsPerVersionEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "mdg.engine.proto.ClientNameStats.PersistedQueryMissesPerVersionEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "mdg.engine.proto.ClientNameStats.RegisteredOperationCountPerVersionEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "mdg.engine.proto.ClientNameStats.RequestsCountPerVersionEntry")
	proto.RegisterType((*QueryLatencyStats)(nil), "mdg.engine.proto.QueryLatencyStats")
	proto.RegisterType((*StatsContext)(nil), "mdg.engine.proto.StatsContext")
	proto.RegisterType((*ContextualizedQueryLatencyStats)(nil), "mdg.engine.proto.ContextualizedQueryLatencyStats")
	proto.RegisterType((*ContextualizedTypeStats)(nil), "mdg.engine.proto.ContextualizedTypeStats")
	proto.RegisterMapType((map[string]*TypeStat)(nil), "mdg.engine.proto.ContextualizedTypeStats.PerTypeStatEntry")
	proto.RegisterType((*FieldStat)(nil), "mdg.engine.proto.FieldStat")
	proto.RegisterType((*TypeStat)(nil), "mdg.engine.proto.TypeStat")
	proto.RegisterMapType((map[string]*FieldStat)(nil), "mdg.engine.proto.TypeStat.PerFieldStatEntry")
	proto.RegisterType((*QueryStats)(nil), "mdg.engine.proto.QueryStats")
	proto.RegisterMapType((map[string]*ClientNameStats)(nil), "mdg.engine.proto.QueryStats.PerClientNameEntry")
	proto.RegisterMapType((map[string]*TypeStat)(nil), "mdg.engine.proto.QueryStats.PerTypeStatEntry")
	proto.RegisterType((*TracesReport)(nil), "mdg.engine.proto.TracesReport")
	proto.RegisterType((*Field)(nil), "mdg.engine.proto.Field")
	proto.RegisterType((*Type)(nil), "mdg.engine.proto.Type")
	proto.RegisterType((*MemStats)(nil), "mdg.engine.proto.MemStats")
	proto.RegisterType((*TimeStats)(nil), "mdg.engine.proto.TimeStats")
	proto.RegisterType((*StatsReport)(nil), "mdg.engine.proto.StatsReport")
	proto.RegisterMapType((map[string]*QueryStats)(nil), "mdg.engine.proto.StatsReport.LegacyPerQueryImplicitOperationNameEntry")
	proto.RegisterMapType((map[string]*QueryStats)(nil), "mdg.engine.proto.StatsReport.PerQueryEntry")
	proto.RegisterType((*FullTracesReport)(nil), "mdg.engine.proto.FullTracesReport")
	proto.RegisterMapType((map[string]*Traces)(nil), "mdg.engine.proto.FullTracesReport.TracesPerQueryEntry")
	proto.RegisterType((*Traces)(nil), "mdg.engine.proto.Traces")
	proto.RegisterType((*TraceV1)(nil), "mdg.engine.proto.TraceV1")
}

func init() { proto.RegisterFile("reports.proto", fileDescriptor_66b94ab03de429a8) }

var fileDescriptor_66b94ab03de429a8 = []byte{
	// 3319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x5b, 0x73, 0xdb, 0xc6,
	0x15, 0x36, 0x28, 0x5e, 0xc0, 0xc3, 0x8b, 0xa8, 0x95, 0x2c, 0xc1, 0xb4, 0x1d, 0xcb, 0x74, 0x9d,
	0x28, 0x49, 0x4d, 0x5f, 0x92, 0xd8, 0xb1, 0xe3, 0x36, 0xb5, 0x65, 0x29, 0xb2, 0x62, 0x4b, 0x0a,
	0x44, 0xdb, 0x93, 0x36, 0x2d, 0x02, 0x83, 0x2b, 0x12, 0x09, 0x08, 0xc0, 0x00, 0x28, 0x5b, 0xed,
	0x63, 0x66, 0x3a, 0xd3, 0x69, 0x67, 0x3a, 0x69, 0xdf, 0x9a, 0xc9, 0x43, 0xde, 0xfa, 0x98, 0x9f,
	0xd0, 0xff, 0xd1, 0xc9, 0x53, 0xff, 0x43, 0x1f, 0x3b, 0x9d, 0xdd, 0xb3, 0x00, 0x01, 0x12, 0xbc,
	0xc8, 0x71, 0xde, 0xb0, 0xe7, 0x7c, 0xe7, 0xec, 0xed, 0xdc, 0x76, 0x17, 0x50, 0xf1, 0xa8, 0xeb,
	0x78, 0x81, 0xdf, 0x74, 0x3d, 0x27, 0x70, 0x48, 0xad, 0xd7, 0xee, 0x34, 0xa9, 0xdd, 0x31, 0x6d,
	0x8a, 0x94, 0xfa, 0xb9, 0x8e, 0xe3, 0x74, 0x2c, 0x7a, 0x99, 0xb7, 0x9e, 0xf6, 0x0f, 0x2e, 0x07,
	0x66, 0x8f, 0xfa, 0x81, 0xde, 0x73, 0x11, 0xd0, 0xf8, 0x61, 0x15, 0x72, 0x2d, 0x4f, 0x37, 0x28,
	0xb9, 0x09, 0xe0, 0x07, 0xba, 0x17, 0x68, 0x0c, 0xa2, 0x64, 0x57, 0xa5, 0xb5, 0xd2, 0xb5, 0x7a,
	0x13, 0xe5, 0x9b, 0xa1, 0x7c, 0xb3, 0x15, 0xca, 0xab, 0x45, 0x8e, 0x66, 0x6d, 0xf2, 0x1e, 0xc8,
	0xd4, 0x6e, 0xa3, 0xe0, 0xdc, 0x54, 0xc1, 0x02, 0xb5, 0xdb, 0x5c, 0xec, 0x1c, 0x94, 0xda, 0x7d,
	0x4f, 0x0f, 0x4c, 0xc7, 0xd6, 0x6c, 0x5f, 0x29, 0xad, 0x4a, 0x6b, 0x59, 0x15, 0x42, 0xd2, 0x8e,
	0x4f, 0xae, 0x40, 0xd6, 0x73, 0x9c, 0x40, 0xa9, 0x72, 0x9d, 0x67, 0x9a, 0xc3, 0xd3, 0x6b, 0xf2,
	0x91, 0x37, 0x77, 0x9c, 0x36, 0x55, 0x39, 0x92, 0x9c, 0x81, 0xa2, 0x6f, 0x76, 0x6c, 0x3d, 0xe8,
	0x7b, 0x54, 0x59, 0x5c, 0x95, 0xd6, 0x8a, 0xea, 0x80, 0x40, 0x6e, 0x42, 0xa1, 0x4d, 0x03, 0xdd,
	0xb4, 0x7c, 0x25, 0xcf, 0x55, 0x9e, 0x1b, 0xa7, 0xf2, 0x1e, 0xc2, 0xd4, 0x10, 0xcf, 0xc6, 0x6a,
	0x58, 0x26, 0xb5, 0x03, 0xcd, 0xd6, 0x7b, 0x54, 0x29, 0x70, 0xd5, 0x80, 0xa4, 0x1d, 0xbd, 0x47,
	0xc9, 0x45, 0xa8, 0x0a, 0xc0, 0x21, 0xf5, 0x7c, 0xd3, 0xb1, 0x15, 0x99, 0x63, 0x2a, 0x48, 0x7d,
	0x8c, 0xc4, 0x18, 0x4c, 0x6f, 0xb7, 0x3d, 0xea, 0xfb, 0x4a, 0x31, 0x0e, 0xbb, 0x83, 0x44, 0xd2,
	0x84, 0x45, 0x01, 0xf3, 0xe8, 0x01, 0xf5, 0xa8, 0x6d, 0x50, 0xcd, 0x6c, 0x2b, 0x2b, 0x1c, 0xbb,
	0x80, 0x2c, 0x35, 0xe4, 0xdc, 0x6f, 0xb3, 0x95, 0xea, 0x06, 0x81, 0xab, 0xc0, 0xe4, 0x95, 0xda,
	0x6a, 0xb5, 0xf6, 0x54, 0x8e, 0x24, 0x9b, 0x50, 0x36, 0x74, 0xa3, 0x4b, 0x35, 0xd7, 0xb1, 0x4c,
	0xe3, 0x48, 0x21, 0x5c, 0xf2, 0xc2, 0x38, 0xc9, 0x75, 0x86, 0xdd, 0xe3, 0x50, 0xb5, 0x64, 0x0c,
	0x1a, 0xe4, 0x1e, 0xc0, 0xb3, 0x3e, 0xf5, 0x8e, 0x34, 0xd7, 0xd2, 0x6d, 0xa5, 0xce, 0xb5, 0x5c,
	0x1c, 0xa7, 0xe5, 0x13, 0x86, 0xdc, 0xb3, 0x74, 0x9b, 0x6f, 0x59, 0xf1, 0x59, 0xd8, 0x24, 0x97,
	0x61, 0xe9, 0xa0, 0x6f, 0x59, 0x1a, 0xaa, 0xc2, 0x81, 0x75, 0xcd, 0x40, 0x59, 0x5a, 0x95, 0xd6,
	0x64, 0x75, 0x81, 0xf1, 0xb8, 0x2c, 0x1f, 0xc6, 0x96, 0x19, 0xb0, 0x05, 0x72, 0xd9, 0x92, 0xfa,
	0x01, 0x6d, 0x0b, 0x29, 0x86, 0x3f, 0x89, 0xf8, 0x88, 0xc5, 0x85, 0x18, 0xfe, 0x7d, 0x50, 0x86,
	0xf1, 0x1e, 0xed, 0xb0, 0xa6, 0xa7, 0x2c, 0x73, 0xa1, 0xe5, 0xa4, 0x90, 0x2a, 0xb8, 0xe4, 0x2a,
	0x2c, 0x85, 0x48, 0xda, 0xd6, 0x1c, 0x97, 0xa2, 0x79, 0x2a, 0x0a, 0x97, 0x5a, 0x1c, 0xf0, 0x76,
	0x43, 0x16, 0xb9, 0x0c, 0x8b, 0x07, 0x8e, 0xf7, 0xd4, 0x6c, 0xb7, 0xa9, 0x1d, 0x93, 0x38, 0xc5,
	0x25, 0x48, 0xc4, 0x1a, 0x08, 0x3c, 0x81, 0xba, 0xe3, 0x99, 0x1d, 0xd3, 0xd6, 0xd0, 0xa1, 0x69,
	0x5b, 0x8b, 0xf9, 0xe2, 0xfc, 0x54, 0x97, 0x5a, 0x41, 0x69, 0x55, 0x08, 0xef, 0x47, 0x9e, 0xb9,
	0x0f, 0xca, 0xb0, 0xe2, 0xc8, 0x53, 0x6b, 0x53, 0xd5, 0x9e, 0x4c, 0xaa, 0xdd, 0x10, 0x7e, 0xfb,
	0x0b, 0x38, 0x3d, 0xac, 0x34, 0xee, 0xc7, 0x0b, 0xdc, 0x8f, 0x95, 0xa4, 0xec, 0xbd, 0x81, 0x57,
	0x7f, 0x04, 0xab, 0x16, 0xed, 0xe8, 0xc6, 0x91, 0x16, 0x79, 0xa6, 0x66, 0x53, 0xda, 0xf6, 0x35,
	0x8f, 0x32, 0x8a, 0x69, 0x77, 0x94, 0x1c, 0x37, 0xf4, 0xb3, 0x88, 0xdb, 0x0f, 0x61, 0x3b, 0x0c,
	0xa5, 0x86, 0xa0, 0xfa, 0x37, 0x12, 0x94, 0x62, 0x76, 0x49, 0x3e, 0x84, 0x9c, 0x6f, 0x38, 0x2e,
	0x55, 0xa4, 0x55, 0x69, 0xad, 0x7a, 0xed, 0xcd, 0x19, 0x6c, 0xb9, 0xb9, 0xcf, 0x04, 0x54, 0x94,
	0x23, 0x67, 0x00, 0x7a, 0xfa, 0x0b, 0x4d, 0xef, 0x50, 0x36, 0x8f, 0xcc, 0xaa, 0xb4, 0x36, 0xa7,
	0xca, 0x3d, 0xfd, 0xc5, 0x9d, 0x0e, 0xdd, 0xf1, 0x1b, 0x97, 0x20, 0xc7, 0xd1, 0xa4, 0x04, 0x85,
	0x47, 0x3b, 0x1f, 0xef, 0xec, 0x3e, 0xd9, 0xa9, 0x9d, 0x20, 0x00, 0xf9, 0xbd, 0x47, 0x77, 0x1f,
	0xdc, 0x5f, 0xaf, 0x49, 0x8c, 0xb1, 0xa7, 0xde, 0x7f, 0x7c, 0xa7, 0xb5, 0x51, 0xcb, 0xd4, 0xff,
	0x9b, 0x81, 0x82, 0x08, 0x23, 0xe4, 0x53, 0xa8, 0x1e, 0xea, 0x9e, 0xa9, 0x3f, 0xb5, 0xa8, 0xaf,
	0x7d, 0xe1, 0x3b, 0xb6, 0x92, 0x5d, 0x9d, 0x5b, 0x2b, 0x5d, 0xbb, 0x36, 0x25, 0xfe, 0x34, 0x1f,
	0x87, 0x52, 0xdb, 0xbe, 0x63, 0x6f, 0xd8, 0x81, 0x77, 0xa4, 0x56, 0x0e, 0xe3, 0x34, 0xf2, 0x00,
	0x8a, 0x11, 0x41, 0x91, 0xb8, 0xd6, 0xe6, 0xcc, 0x5a, 0x51, 0xe3, 0x40, 0x01, 0x39, 0x0d, 0x45,
	0x4f, 0x7f, 0x8e, 0x0e, 0xc2, 0x17, 0xa0, 0xa8, 0xca, 0x9e, 0xfe, 0x9c, 0x7b, 0x04, 0x8b, 0x5d,
	0x91, 0x31, 0x63, 0x18, 0x9c, 0xc3, 0xd8, 0x15, 0x51, 0x59, 0x24, 0xac, 0xff, 0x0a, 0xc8, 0xe8,
	0xb0, 0x49, 0x0d, 0xe6, 0xbe, 0xa4, 0x47, 0x7c, 0x6b, 0x8a, 0x2a, 0xfb, 0x24, 0x4b, 0x90, 0x3b,
	0xd4, 0xad, 0x3e, 0x15, 0xfd, 0x60, 0xe3, 0x56, 0xe6, 0x7d, 0xa9, 0x7e, 0x1b, 0xaa, 0xc9, 0x21,
	0x4e, 0x93, 0x2e, 0xc7, 0xa5, 0xff, 0x22, 0x41, 0x6e, 0xc3, 0xf3, 0x1c, 0x8f, 0x28, 0x50, 0xe8,
	0x51, 0xdf, 0xd7, 0x3b, 0x54, 0x48, 0x86, 0x4d, 0x72, 0x1b, 0x64, 0xcb, 0x31, 0xd0, 0x2d, 0x33,
	0x7c, 0xd1, 0x56, 0xc7, 0x2d, 0xda, 0x03, 0x81, 0x53, 0x23, 0x09, 0xb2, 0x02, 0x05, 0xe6, 0x41,
	0xcc, 0x48, 0xe6, 0xb8, 0xb1, 0xe7, 0x59, 0x73, 0xc7, 0x27, 0x04, 0xb2, 0x62, 0x77, 0x59, 0x6f,
	0xfc, 0xbb, 0xfe, 0x9f, 0x1c, 0x64, 0x59, 0xdc, 0x25, 0x1f, 0x40, 0xbe, 0x47, 0x83, 0xae, 0xd3,
	0x16, 0xf6, 0x79, 0x61, 0x52, 0x94, 0x6e, 0x3e, 0xe4, 0x50, 0x55, 0x88, 0x30, 0xcd, 0x5d, 0xc7,
	0x0f, 0xc4, 0x5a, 0xf1, 0x6f, 0x46, 0x73, 0xf5, 0xa0, 0x2b, 0x76, 0x81, 0x7f, 0x93, 0x4f, 0x61,
	0xde, 0xa3, 0xcf, 0xfa, 0xd4, 0x0f, 0xb4, 0x2e, 0xd5, 0xdb, 0xd4, 0xf3, 0x85, 0xa9, 0x5d, 0x99,
	0xd8, 0x9b, 0x8a, 0x32, 0x5b, 0x28, 0x82, 0x66, 0x51, 0xf5, 0x12, 0x44, 0xf2, 0x19, 0xd4, 0x3c,
	0xea, 0xbb, 0x8e, 0xed, 0xd3, 0x48, 0x77, 0x8e, 0xeb, 0xbe, 0x3a, 0x45, 0x37, 0x0a, 0x25, 0x94,
	0xcf, 0x7b, 0x49, 0x2a, 0x4b, 0xb0, 0x7e, 0xa0, 0x07, 0x7d, 0x5f, 0x33, 0x9c, 0x36, 0xe5, 0xf9,
	0xb9, 0xa2, 0x02, 0x92, 0xd6, 0x9d, 0x36, 0x25, 0xcb, 0x90, 0xf7, 0xa9, 0xc1, 0xf2, 0xba, 0xcc,
	0xe3, 0xa8, 0x68, 0x91, 0x3a, 0xc8, 0xbc, 0x4b, 0xc3, 0xb1, 0x44, 0x2e, 0x8d, 0xda, 0xf5, 0xd7,
	0x20, 0xff, 0x98, 0xd9, 0x85, 0x3f, 0x30, 0x17, 0xe6, 0x22, 0xa1, 0xb1, 0xd5, 0x0f, 0x60, 0x31,
	0x65, 0xe6, 0x29, 0xd6, 0x76, 0x33, 0x6e, 0x6d, 0xa5, 0x29, 0x5b, 0x87, 0x5d, 0xc6, 0x4d, 0xb2,
	0x03, 0x4b, 0x69, 0xab, 0xf0, 0xca, 0x3b, 0x6a, 0x3c, 0x87, 0x3c, 0x1a, 0x4e, 0x32, 0x48, 0x95,
	0xa0, 0xb0, 0xbb, 0xd7, 0xba, 0xbf, 0xbb, 0xb3, 0x5f, 0x93, 0x48, 0x01, 0xe6, 0x3e, 0xda, 0x68,
	0xd5, 0x32, 0x44, 0x86, 0xec, 0xd6, 0xc6, 0x9d, 0x7b, 0xb5, 0x39, 0xf6, 0xb5, 0xb7, 0xbb, 0xdf,
	0xaa, 0x65, 0x19, 0x73, 0xef, 0x51, 0xab, 0x96, 0x63, 0x71, 0xed, 0xde, 0xc6, 0x83, 0x8d, 0xd6,
	0x46, 0x2d, 0x4f, 0x8a, 0x90, 0x6b, 0xa9, 0x77, 0xd6, 0x37, 0x6a, 0x05, 0xa6, 0x69, 0x7d, 0x77,
	0x67, 0x67, 0x63, 0xbd, 0x55, 0x93, 0x19, 0x7d, 0xef, 0x4e, 0x6b, 0x7d, 0xab, 0x56, 0xac, 0x5f,
	0x07, 0x39, 0x74, 0x14, 0x66, 0x97, 0x96, 0x69, 0xa3, 0xcf, 0x55, 0x54, 0xfe, 0xcd, 0x76, 0xcf,
	0x70, 0xac, 0x7e, 0xcf, 0xe6, 0x13, 0xab, 0xa8, 0xa2, 0x55, 0xff, 0x6e, 0x0e, 0xb2, 0xac, 0x18,
	0x20, 0x17, 0x59, 0x31, 0x2b, 0xac, 0x8b, 0xc7, 0x16, 0xbe, 0x28, 0x5b, 0x27, 0xd4, 0x72, 0x48,
	0xe6, 0x65, 0xd6, 0x32, 0xe4, 0x4c, 0xbb, 0x4d, 0x5f, 0xa0, 0x9a, 0xad, 0x13, 0x2a, 0x36, 0x59,
	0x3d, 0x80, 0x09, 0x47, 0xb7, 0xb4, 0x03, 0x93, 0x5a, 0x6d, 0x54, 0x52, 0xc5, 0x82, 0x29, 0x64,
	0x6d, 0x32, 0x0e, 0xd7, 0x43, 0x20, 0x1b, 0x1c, 0xb9, 0x61, 0x04, 0xe3, 0xdf, 0xcc, 0x04, 0x5d,
	0xdd, 0x63, 0x45, 0x17, 0x67, 0x55, 0xb0, 0xc6, 0x43, 0x52, 0x8b, 0x01, 0x86, 0x6b, 0xa6, 0xdc,
	0x4b, 0xd6, 0x4c, 0x67, 0x13, 0xa5, 0xb6, 0xcc, 0x43, 0x48, 0xac, 0x9c, 0x3e, 0x15, 0x2b, 0xa7,
	0x8b, 0x9c, 0x19, 0x95, 0xcc, 0xef, 0x40, 0x8e, 0xb2, 0xd0, 0xa6, 0x94, 0xb8, 0xe3, 0x9d, 0x1d,
	0xd7, 0x35, 0x8f, 0x7f, 0x2a, 0x62, 0xc9, 0x35, 0xc8, 0x19, 0x5d, 0xd3, 0x6a, 0x2b, 0x65, 0x2e,
	0x34, 0xb9, 0x8e, 0x46, 0xe8, 0xdd, 0x2c, 0x64, 0xcc, 0xf6, 0x76, 0x56, 0xce, 0xd6, 0x72, 0xf5,
	0xef, 0x64, 0xa8, 0x24, 0x2a, 0x37, 0xb2, 0x07, 0xb2, 0xcf, 0xfc, 0xc6, 0x36, 0x70, 0x9f, 0x26,
	0x64, 0xb2, 0x84, 0x60, 0x73, 0x5f, 0x48, 0xb1, 0xc6, 0xd6, 0x09, 0x35, 0xd2, 0xc2, 0x34, 0xba,
	0xba, 0xa7, 0x5b, 0x16, 0xb5, 0x84, 0xe9, 0xcf, 0xa8, 0x71, 0x4f, 0x48, 0x85, 0x1a, 0x43, 0x2d,
	0xe4, 0x23, 0xc8, 0x1d, 0xd0, 0xc0, 0xe8, 0x8a, 0x13, 0xc9, 0xe5, 0xd9, 0xd4, 0x6d, 0x32, 0x11,
	0xa1, 0x0b, 0xe5, 0xc9, 0x43, 0x28, 0x1c, 0x58, 0x7a, 0x10, 0x50, 0x5b, 0x9c, 0x8a, 0xae, 0xce,
	0xa8, 0x0a, 0x85, 0x84, 0xb2, 0x50, 0x47, 0xfd, 0x63, 0x28, 0xc7, 0x57, 0x81, 0x7c, 0x00, 0x39,
	0xdb, 0x69, 0x47, 0xc9, 0x7b, 0xc6, 0xda, 0x19, 0x65, 0x98, 0xb2, 0xf8, 0x02, 0xfc, 0x38, 0x65,
	0xdf, 0x67, 0xa0, 0x18, 0xcd, 0x9f, 0xac, 0x42, 0xc9, 0xa7, 0xde, 0xa1, 0x69, 0x70, 0xc7, 0x13,
	0x31, 0x2a, 0x4e, 0x22, 0x4d, 0x20, 0x01, 0xd3, 0xb6, 0xa7, 0x7b, 0xbe, 0x69, 0x77, 0x36, 0x75,
	0xd3, 0xa2, 0x6d, 0xbe, 0x7b, 0xb2, 0x9a, 0xc2, 0x21, 0x97, 0x20, 0xc7, 0xa9, 0x62, 0x47, 0x56,
	0xc6, 0x0c, 0x4e, 0x45, 0x14, 0x59, 0x83, 0x9a, 0xcf, 0x9d, 0x91, 0xa5, 0x5a, 0xe7, 0xe0, 0xc0,
	0xa7, 0x01, 0xdf, 0x80, 0xac, 0x5a, 0x65, 0x74, 0xe6, 0x0f, 0xbb, 0x9c, 0x4a, 0x6e, 0x40, 0x31,
	0x42, 0x0a, 0xa7, 0x9c, 0x54, 0xd6, 0xca, 0xa1, 0x38, 0xf9, 0x90, 0x05, 0x1d, 0x83, 0x9a, 0x87,
	0x54, 0xb8, 0x5b, 0x7e, 0xaa, 0x70, 0x39, 0x14, 0x60, 0xa4, 0xfa, 0x3f, 0x25, 0x28, 0xc5, 0xf6,
	0x99, 0xfc, 0x2e, 0x16, 0xc5, 0x78, 0x6e, 0xc6, 0x7d, 0xb8, 0x39, 0x9b, 0xc5, 0x84, 0x39, 0x62,
	0x4f, 0x0f, 0xba, 0x1b, 0x16, 0xed, 0xb1, 0x43, 0x5e, 0x14, 0xfe, 0x18, 0x91, 0xdc, 0x84, 0x2c,
	0xdb, 0x2b, 0xe1, 0x22, 0x33, 0x6e, 0x2f, 0x17, 0xa9, 0xb7, 0x58, 0xae, 0x1b, 0xd1, 0x4f, 0xce,
	0x01, 0xc4, 0xe2, 0x65, 0x18, 0x74, 0x8b, 0x07, 0x51, 0xa4, 0x1c, 0x13, 0x71, 0x31, 0x42, 0xdc,
	0xcd, 0xe3, 0x80, 0xb6, 0xb3, 0x72, 0xb9, 0x56, 0xd9, 0xce, 0xca, 0x95, 0x5a, 0x75, 0x3b, 0x2b,
	0x4b, 0xb5, 0xcc, 0x76, 0x56, 0xce, 0xd4, 0xe6, 0x1a, 0x5f, 0x67, 0xa0, 0x8c, 0x67, 0x00, 0x4c,
	0x7c, 0xac, 0x26, 0x13, 0x36, 0x24, 0x62, 0x6f, 0xd8, 0x64, 0x89, 0x9c, 0x95, 0x35, 0x7c, 0x1c,
	0x58, 0xff, 0x47, 0x6d, 0x72, 0x01, 0x2a, 0x7a, 0x27, 0x7e, 0xb8, 0xce, 0x73, 0x40, 0x99, 0x13,
	0xc3, 0xb3, 0xf5, 0x1b, 0x30, 0x2f, 0x74, 0x45, 0x30, 0x3c, 0xa7, 0x57, 0x05, 0x39, 0x06, 0xf4,
	0xfa, 0x36, 0xb7, 0xab, 0xe4, 0x61, 0xbd, 0x2a, 0xc8, 0x21, 0x70, 0x09, 0x72, 0x7d, 0x3e, 0x1e,
	0x2c, 0x2c, 0xb0, 0xc1, 0xc3, 0xb7, 0xd1, 0xa5, 0x3d, 0x5d, 0x0b, 0xf4, 0x0e, 0x3f, 0x72, 0x17,
	0xd5, 0x22, 0x52, 0x5a, 0x7a, 0x87, 0x57, 0x32, 0xc8, 0xee, 0xea, 0x7e, 0x97, 0x5f, 0x6b, 0x14,
	0x55, 0x21, 0xb1, 0xa5, 0xfb, 0xdd, 0xc6, 0x37, 0x19, 0xa8, 0xf2, 0x2d, 0x60, 0xd1, 0x79, 0x3f,
	0xd0, 0x03, 0x9f, 0x6c, 0x83, 0xcc, 0xe3, 0xae, 0x47, 0xed, 0xf1, 0x45, 0x7c, 0x52, 0xa6, 0xb9,
	0x2e, 0x04, 0xb0, 0xa0, 0x8a, 0xe4, 0xc9, 0x79, 0x28, 0xf3, 0xb8, 0xcf, 0x2a, 0xa9, 0xbe, 0x1d,
	0xfa, 0x4c, 0x09, 0x69, 0xeb, 0x8c, 0x44, 0x3e, 0x80, 0xba, 0x28, 0xee, 0x7c, 0xed, 0xb9, 0x19,
	0x74, 0xb5, 0x84, 0x40, 0x8e, 0x0b, 0xac, 0x84, 0x88, 0x27, 0xa6, 0xe8, 0x16, 0x85, 0xeb, 0xbf,
	0x85, 0x4a, 0xa2, 0xeb, 0x94, 0x2a, 0xe6, 0x7a, 0xb2, 0x8a, 0x59, 0x9d, 0x36, 0x97, 0x78, 0x09,
	0xf3, 0xf7, 0x0a, 0xcc, 0xaf, 0x47, 0xf7, 0x2a, 0xb8, 0x3c, 0x17, 0xa0, 0x62, 0xe9, 0x01, 0xb5,
	0x8d, 0x23, 0x31, 0x44, 0xb6, 0x46, 0x73, 0x6a, 0x59, 0x10, 0x71, 0x52, 0x7f, 0x88, 0x4d, 0x8a,
	0xa3, 0x34, 0x97, 0x7a, 0xd1, 0x06, 0xcf, 0xf1, 0x55, 0xfd, 0xe5, 0xe8, 0x48, 0x86, 0xfa, 0x0a,
	0x4b, 0x61, 0x9c, 0xec, 0x1e, 0xf5, 0x84, 0x2d, 0xe0, 0x2a, 0x47, 0x8b, 0x32, 0xc4, 0x25, 0x0e,
	0x2c, 0x47, 0xb7, 0x16, 0x7e, 0xa2, 0x63, 0x2c, 0xbf, 0x6f, 0x4d, 0xef, 0x38, 0xbc, 0xdb, 0xf0,
	0x87, 0x3b, 0x5d, 0x34, 0x46, 0x39, 0xe4, 0xcf, 0x12, 0xac, 0xa6, 0xdc, 0x80, 0x24, 0xfb, 0x06,
	0xde, 0xf7, 0xfa, 0xf4, 0xbe, 0xf7, 0x86, 0x2f, 0x4c, 0x46, 0x06, 0x71, 0xc6, 0x9d, 0x00, 0x21,
	0x5f, 0x4b, 0xd0, 0x18, 0x1e, 0x4d, 0xcf, 0xf4, 0x7d, 0x9a, 0x1c, 0x0f, 0x56, 0x2d, 0x1b, 0xc7,
	0x1d, 0xcf, 0x43, 0xae, 0x69, 0x78, 0x44, 0xaf, 0xb9, 0x13, 0x41, 0xe4, 0x5b, 0x09, 0x5e, 0x4f,
	0xbb, 0xb9, 0x49, 0x31, 0x0e, 0x2c, 0x8c, 0xee, 0xcf, 0x62, 0x1c, 0x23, 0xb7, 0x3d, 0xa9, 0x76,
	0xd2, 0xf0, 0xa6, 0x02, 0xc9, 0x3f, 0x24, 0xb8, 0x98, 0x72, 0x4d, 0x94, 0x32, 0xbc, 0x0a, 0x1f,
	0xde, 0xd6, 0xf4, 0xe1, 0x6d, 0x8e, 0x5c, 0x2d, 0xa5, 0x8e, 0xee, 0xfc, 0xc1, 0x34, 0x1c, 0xbf,
	0x80, 0xe4, 0xf6, 0x9c, 0xf4, 0xbb, 0x1c, 0xf7, 0xbb, 0x05, 0xce, 0x7a, 0x10, 0x77, 0xbe, 0x6d,
	0xa8, 0x79, 0x8e, 0x13, 0x60, 0x20, 0xd1, 0xd8, 0xb1, 0x2d, 0xbc, 0x63, 0x9d, 0xee, 0xfc, 0x55,
	0x26, 0x19, 0x0b, 0x86, 0x93, 0xa3, 0x53, 0x61, 0x62, 0x74, 0x22, 0xef, 0xc0, 0xb2, 0xdb, 0x7f,
	0x6a, 0x99, 0x86, 0xb8, 0x45, 0x0c, 0x02, 0x4b, 0x08, 0xca, 0x7c, 0xec, 0x8b, 0xc8, 0xe5, 0xce,
	0xd6, 0x0a, 0x2c, 0x14, 0x7a, 0x0f, 0x56, 0x5c, 0xcf, 0x3c, 0xd4, 0x03, 0x3a, 0x22, 0x55, 0xe4,
	0x52, 0x4b, 0x82, 0x9d, 0x10, 0xab, 0x6f, 0xc3, 0x99, 0x49, 0xd1, 0x62, 0xda, 0xad, 0x45, 0x36,
	0x7e, 0x44, 0xdc, 0x04, 0x65, 0x5c, 0x00, 0x38, 0x96, 0x9e, 0x5d, 0x38, 0x3f, 0xd5, 0x99, 0x8f,
	0xa5, 0xf0, 0x13, 0xb8, 0x30, 0x83, 0x37, 0x1e, 0x4b, 0xe5, 0x23, 0x78, 0x63, 0x46, 0x47, 0x3a,
	0x96, 0xda, 0x16, 0xbc, 0x3e, 0x9b, 0x03, 0x1c, 0x47, 0xab, 0xa8, 0x63, 0xbe, 0xca, 0xc1, 0x02,
	0x9f, 0xbd, 0xb0, 0xfa, 0x63, 0xe4, 0xa5, 0x0b, 0xac, 0x26, 0xc4, 0x2b, 0x19, 0x04, 0x61, 0x17,
	0x65, 0x41, 0x44, 0xd0, 0x59, 0x80, 0x41, 0xfe, 0x10, 0xb7, 0x4a, 0xc5, 0x28, 0xee, 0x93, 0x2b,
	0xb0, 0x94, 0x16, 0xec, 0x45, 0x6e, 0x27, 0xa3, 0xb1, 0x99, 0xbc, 0x0b, 0xcb, 0xe9, 0x01, 0x59,
	0xa4, 0xf7, 0xa5, 0xb4, 0xe8, 0x39, 0xce, 0xed, 0xf3, 0xc7, 0x71, 0xfb, 0xc2, 0x4f, 0xe2, 0xf6,
	0xf2, 0xcb, 0xba, 0x7d, 0xf1, 0xa5, 0xdc, 0x1e, 0xc6, 0xbb, 0x3d, 0xb9, 0xcd, 0x06, 0x3a, 0x2e,
	0xaf, 0x88, 0x67, 0x2c, 0x65, 0x5c, 0x02, 0x20, 0xb7, 0xe0, 0xd4, 0xd8, 0xa8, 0xaf, 0x94, 0x71,
	0x96, 0x63, 0xe2, 0x73, 0xe3, 0x8f, 0x12, 0x94, 0xf9, 0x62, 0xad, 0x3b, 0x76, 0x40, 0x5f, 0x04,
	0xe3, 0xde, 0x89, 0xa4, 0x71, 0xef, 0x44, 0x43, 0xcf, 0x58, 0x99, 0x19, 0x9e, 0xb1, 0xe6, 0x52,
	0x9e, 0xb1, 0x1a, 0xdf, 0x4b, 0x70, 0x4e, 0x8c, 0xa1, 0xaf, 0x5b, 0xe6, 0xef, 0x85, 0x15, 0x25,
	0x9c, 0x63, 0x1f, 0x16, 0xd1, 0xee, 0x42, 0x5b, 0x42, 0xf3, 0x90, 0xc6, 0x5d, 0x9a, 0x8c, 0x68,
	0x50, 0x17, 0x9e, 0x8d, 0x28, 0x7d, 0x1f, 0x0a, 0x06, 0xf6, 0x2b, 0x6a, 0xcb, 0xd7, 0x46, 0x15,
	0xc5, 0x57, 0x48, 0x0d, 0xe1, 0x8d, 0xbf, 0x66, 0x60, 0x25, 0x39, 0xe4, 0xd6, 0x91, 0x4b, 0x47,
	0xb4, 0x4a, 0xc7, 0xd2, 0xca, 0x0e, 0x7c, 0x2c, 0x53, 0x07, 0x47, 0x2e, 0xe5, 0xf3, 0x13, 0xb7,
	0xc9, 0x69, 0xe5, 0x5e, 0x7a, 0xdf, 0xac, 0xd4, 0x09, 0x1b, 0x98, 0x9d, 0x4b, 0xee, 0x80, 0x52,
	0xff, 0x35, 0xd4, 0x86, 0x01, 0x29, 0xd1, 0xeb, 0x4a, 0xb2, 0xde, 0xae, 0xa7, 0x9c, 0x0b, 0x85,
	0x86, 0x78, 0xa5, 0xfd, 0x6f, 0x09, 0x8a, 0xfc, 0x46, 0x8c, 0x31, 0x08, 0x81, 0x6c, 0xcc, 0x26,
	0xf8, 0x37, 0x33, 0x17, 0x8f, 0x06, 0x7d, 0xcf, 0xd6, 0x62, 0x97, 0x65, 0x80, 0x24, 0x7e, 0x23,
	0x36, 0xc3, 0x59, 0x63, 0x09, 0x72, 0xf1, 0x63, 0x05, 0x36, 0xa6, 0x38, 0x7b, 0x7e, 0xb2, 0xb3,
	0x8f, 0x84, 0x5d, 0x79, 0x34, 0xec, 0x36, 0xbe, 0xca, 0x80, 0x1c, 0xce, 0x3a, 0x9a, 0x9c, 0x14,
	0x9b, 0xdc, 0x55, 0xc8, 0xf1, 0x53, 0xae, 0xd8, 0xb2, 0xd3, 0xa3, 0x8b, 0x16, 0x2d, 0x8e, 0x8a,
	0x48, 0xa2, 0x42, 0x95, 0xed, 0x36, 0x1e, 0x98, 0xf9, 0x76, 0xe3, 0xb1, 0xe2, 0xe7, 0xe3, 0x17,
	0x9c, 0xed, 0x6f, 0xa4, 0x07, 0x37, 0xb8, 0xec, 0xc6, 0x48, 0xf5, 0xcf, 0x60, 0x61, 0x04, 0x92,
	0xb2, 0xc5, 0x57, 0x93, 0x5b, 0x3c, 0x79, 0xb4, 0x83, 0x3d, 0xfe, 0x5f, 0x16, 0x80, 0x3b, 0x16,
	0x1a, 0xfa, 0x13, 0x98, 0x67, 0x13, 0x88, 0xc7, 0x00, 0x3c, 0x6e, 0x5e, 0x1e, 0xe3, 0x8f, 0x91,
	0x8d, 0x0e, 0x4a, 0x4d, 0xf1, 0x0c, 0xe5, 0xc6, 0x69, 0xe4, 0x0b, 0x50, 0xd0, 0xd9, 0xb9, 0x93,
	0xe3, 0x96, 0x86, 0x2e, 0x95, 0x1d, 0xf7, 0x48, 0x30, 0x25, 0x82, 0xa8, 0x27, 0x9f, 0x45, 0x43,
	0x60, 0x26, 0x10, 0x06, 0xbd, 0xf7, 0x40, 0x0e, 0x7d, 0x4e, 0xec, 0xdd, 0x24, 0x83, 0x2f, 0x08,
	0x77, 0x22, 0x9f, 0x0c, 0xbb, 0x2a, 0xee, 0xdd, 0xa5, 0x69, 0x33, 0x1f, 0xef, 0x9d, 0xe4, 0x73,
	0x58, 0x89, 0xd4, 0x0d, 0x4d, 0x1a, 0x5f, 0x46, 0xde, 0x9c, 0x39, 0x0e, 0xa8, 0x4b, 0x41, 0xf8,
	0x19, 0x9b, 0x6b, 0xdd, 0x00, 0x32, 0xba, 0xf8, 0x29, 0xe6, 0x71, 0x23, 0x69, 0x1e, 0xe7, 0xa7,
	0x9e, 0x15, 0xe2, 0x85, 0xd3, 0x4f, 0x19, 0x64, 0xfa, 0x50, 0xe6, 0x77, 0x52, 0x3e, 0xde, 0x02,
	0x91, 0xeb, 0x90, 0xc7, 0xc7, 0xa3, 0xf1, 0x91, 0x36, 0x7e, 0x5f, 0xa4, 0x0a, 0xf4, 0xe0, 0xf2,
	0x10, 0x77, 0x7c, 0xca, 0xe5, 0x61, 0xe3, 0x36, 0xe4, 0xb8, 0x3f, 0xbc, 0x54, 0x58, 0x6b, 0xdc,
	0x87, 0x2c, 0x37, 0x99, 0xb4, 0xb0, 0x71, 0x29, 0x19, 0x36, 0x56, 0xc6, 0x38, 0xa2, 0x08, 0x19,
	0x8d, 0x1f, 0xb2, 0x20, 0x3f, 0xa4, 0x3d, 0x74, 0xbf, 0x73, 0x50, 0x0a, 0x9c, 0x40, 0xb7, 0xb4,
	0xa7, 0x47, 0x01, 0xc5, 0x54, 0x98, 0x55, 0x81, 0x93, 0xee, 0x32, 0x8a, 0x78, 0x05, 0x33, 0xbe,
	0x14, 0x00, 0xac, 0x14, 0x81, 0x93, 0x10, 0x70, 0x16, 0xa0, 0x4b, 0x75, 0x57, 0xf0, 0x45, 0x9d,
	0xc8, 0x28, 0xc8, 0x6e, 0xc2, 0x22, 0x67, 0x7b, 0xd4, 0xa2, 0xba, 0x4f, 0xdb, 0x02, 0x57, 0xe1,
	0xb8, 0x05, 0xc6, 0x52, 0x05, 0x07, 0xf1, 0x6f, 0xc1, 0x42, 0xc7, 0xd0, 0x9c, 0x43, 0xea, 0xb1,
	0x65, 0x16, 0x68, 0x0c, 0xe2, 0xf3, 0x1d, 0x63, 0x57, 0xd0, 0x11, 0xbb, 0x06, 0x35, 0x1c, 0x5b,
	0x7f, 0xa0, 0x38, 0x27, 0xee, 0x63, 0x19, 0xfd, 0x51, 0xa4, 0xf5, 0x0a, 0x2c, 0xf1, 0x51, 0xe8,
	0x16, 0x7f, 0x32, 0x8d, 0xd0, 0x18, 0xd6, 0x09, 0xe3, 0xdd, 0x09, 0x59, 0x28, 0xf1, 0x2e, 0x2c,
	0x0f, 0x49, 0x38, 0x4f, 0xbf, 0xa0, 0x86, 0xa8, 0x26, 0xb3, 0xea, 0x52, 0x42, 0x66, 0x17, 0x79,
	0x2c, 0x89, 0xa4, 0xf5, 0xa3, 0xb5, 0xa9, 0x15, 0xe8, 0x61, 0xc5, 0x38, 0xda, 0xdb, 0x3d, 0xc6,
	0x26, 0x1f, 0xc2, 0x99, 0xf4, 0x2e, 0x85, 0x38, 0xbe, 0xbc, 0x9c, 0x4a, 0xeb, 0x18, 0x15, 0xdc,
	0x00, 0x85, 0x2b, 0x38, 0xf0, 0xe8, 0x88, 0x30, 0x70, 0xe1, 0x93, 0x8c, 0xbf, 0xc9, 0xd8, 0x09,
	0xc1, 0x8b, 0x30, 0xdf, 0x31, 0x34, 0x3f, 0x78, 0xae, 0xd9, 0x21, 0x1e, 0x8b, 0xc6, 0x72, 0xc7,
	0xd8, 0x0f, 0x9e, 0xef, 0x08, 0xd8, 0xcf, 0xa0, 0xda, 0x31, 0xc4, 0x6d, 0x00, 0xa2, 0xca, 0x21,
	0x8a, 0x67, 0x38, 0x8e, 0x6a, 0xfc, 0x4d, 0x82, 0x62, 0xcb, 0x0c, 0x2f, 0xca, 0x4e, 0x43, 0xb1,
	0xef, 0x86, 0x6f, 0xd3, 0x68, 0x5e, 0x32, 0x12, 0x76, 0x7c, 0xd2, 0x60, 0x07, 0x11, 0xdd, 0x1a,
	0xf4, 0x8a, 0xe6, 0x55, 0x62, 0xc4, 0xb0, 0xd3, 0x06, 0x54, 0xfa, 0x3e, 0xf5, 0x06, 0x18, 0x34,
	0xb1, 0x12, 0x23, 0x86, 0x98, 0x55, 0x28, 0xfb, 0x47, 0xfe, 0x00, 0x92, 0x15, 0x56, 0x7a, 0xe4,
	0x0b, 0x44, 0xe3, 0x5f, 0x79, 0x28, 0x61, 0x94, 0xf9, 0x71, 0x4e, 0x7f, 0x03, 0x8a, 0x3d, 0xda,
	0x13, 0x85, 0xe3, 0xd8, 0xb0, 0x13, 0xba, 0x97, 0x2a, 0xf7, 0x42, 0x47, 0xbb, 0x05, 0xc0, 0x57,
	0x01, 0x25, 0xe7, 0xc6, 0xa5, 0xcc, 0x68, 0xe1, 0xd4, 0x62, 0x10, 0xad, 0xe1, 0xcd, 0x91, 0xd7,
	0xb9, 0x97, 0xfa, 0x11, 0xae, 0x38, 0xfb, 0x8f, 0x70, 0x6f, 0xc3, 0x02, 0xdb, 0x03, 0x3e, 0xe2,
	0xf0, 0x4f, 0x1a, 0x61, 0x42, 0xb5, 0x90, 0x11, 0xfe, 0x40, 0x43, 0xb6, 0xa0, 0xc8, 0xd2, 0x18,
	0xfe, 0xa2, 0x51, 0xe5, 0x31, 0xe8, 0xed, 0x31, 0xd5, 0x2a, 0xae, 0x29, 0xcb, 0x61, 0x3c, 0xa3,
	0x89, 0x8b, 0x62, 0x57, 0x34, 0xc9, 0xb7, 0x12, 0xac, 0x89, 0x3f, 0x71, 0x22, 0x8d, 0x9a, 0xd9,
	0x73, 0x2d, 0xd3, 0x30, 0x03, 0x6d, 0xe8, 0x57, 0x0f, 0xbc, 0x22, 0xdb, 0x9c, 0xdc, 0xd3, 0x03,
	0xae, 0x2d, 0xec, 0xef, 0xbe, 0x50, 0xb5, 0x1b, 0xff, 0x3d, 0x04, 0x07, 0x71, 0xc1, 0x9a, 0x8e,
	0x24, 0x6f, 0x89, 0x37, 0x5a, 0xbc, 0xfe, 0x5a, 0x4e, 0xcf, 0x37, 0xf8, 0x76, 0x5b, 0xff, 0x14,
	0x2a, 0x89, 0x69, 0xa6, 0xe4, 0xaf, 0x6b, 0xc9, 0xfc, 0x75, 0x66, 0x52, 0xde, 0x8f, 0x67, 0xc7,
	0x00, 0xd6, 0x66, 0x9d, 0xd7, 0xab, 0xeb, 0xb5, 0xf1, 0xa7, 0x0c, 0xd4, 0x36, 0xfb, 0x96, 0xf5,
	0x4a, 0x92, 0xe7, 0xe7, 0x50, 0xe3, 0x69, 0xd1, 0x1f, 0x6c, 0xb4, 0x28, 0x50, 0xae, 0xa7, 0xa4,
	0xaf, 0xa1, 0x5e, 0x31, 0xb1, 0xfa, 0x49, 0x2b, 0xaa, 0x06, 0x09, 0x62, 0xfd, 0x37, 0xb0, 0x98,
	0x02, 0x4b, 0x59, 0x8f, 0x66, 0x72, 0x3d, 0x94, 0x31, 0x79, 0x3c, 0xb1, 0x16, 0x37, 0x20, 0x8f,
	0xc4, 0x41, 0x15, 0x20, 0xcd, 0x54, 0x05, 0xb8, 0x50, 0xe0, 0xed, 0xc7, 0x57, 0x5f, 0x45, 0xdd,
	0x31, 0xc3, 0xa3, 0xe5, 0xd3, 0x3c, 0xa7, 0xbd, 0xf3, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18,
	0x7b, 0x1c, 0xb3, 0x9a, 0x2b, 0x00, 0x00,
}
