// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"

	"github.com/nutstick/nithi-backend/model"
)

type Connection interface {
	IsConnection()
}

type Edges interface {
	IsEdges()
}

// Base Node
type Node interface {
	IsNode()
}

type AuthenticatePayload struct {
	Admin *model.Admin `json:"admin"`
}

type ConnectionInput struct {
	// Returns the elements in the list that come after the specified cursor.
	After *string `json:"after"`
	// Returns the elements in the list that come before the specified cursor.
	Before *string `json:"before"`
	// Returns the first _n_ elements from the list.
	First *int `json:"first"`
	// Returns the last _n_ elements from the list.
	Last *int `json:"last"`
}

type LoginPayload struct {
	Viewer *model.Admin `json:"viewer"`
}

// Information about pagination in a connection.
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
}

type RegisterInput struct {
	Email    string   `json:"email"`
	Password string   `json:"password"`
	Name     string   `json:"name"`
	Avatar   *string  `json:"avatar"`
	Roles    []string `json:"roles"`
}

type RegisterPayload struct {
	Admin *model.Admin `json:"admin"`
}

type Direction string

const (
	DirectionAsc  Direction = "ASC"
	DirectionDesc Direction = "DESC"
)

var AllDirection = []Direction{
	DirectionAsc,
	DirectionDesc,
}

func (e Direction) IsValid() bool {
	switch e {
	case DirectionAsc, DirectionDesc:
		return true
	}
	return false
}

func (e Direction) String() string {
	return string(e)
}

func (e *Direction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Direction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Direction", str)
	}
	return nil
}

func (e Direction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
