scalar Upload
scalar Time
scalar Map

directive @hasRole(roles: [String]) on QUERY | MUTATION | FIELD

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

input ConnectionInput {
  """
  Returns the elements in the list that come after the specified cursor.
  """
  after: String
  """
  Returns the elements in the list that come before the specified cursor.
  """
  before: String
  """
  Returns the first _n_ elements from the list.
  """
  first: Int
  """
  Returns the last _n_ elements from the list.
  """
  last: Int
}

interface Connection {
  totalCount: Int!
  edges: [Edges!]
  pageInfo: PageInfo
}

interface Edges {
  node: Node!
  cursor: ID!
}

enum Direction {
  ASC
  DESC
}

"""
Base Node
"""
interface Node {
  id: ID!
}

# Admin type
type Admin implements Node {
  id: ID!
  email: String!
  name: String!
  avatar: String
  roles: [String!]!
  createAt: Time!
  updateAt: Time!
}

type AuthenticatePayload {
  admin: Admin!
}

type LoginPayload {
  viewer: Admin!
}

input RegisterInput {
  email: String!
  password: String!
  name: String!
  avatar: String
  roles: [String!]!
}

type RegisterPayload {
  admin: Admin!
}

type Query {
  helloworld: String!
  viewer: Admin
}

type Mutation {
  """
  Admin
  """
  login(email: String!, password: String!): LoginPayload
  register(admin: RegisterInput!): RegisterPayload
}
